/*
 * Anchor API
 * # Introduction 이 문서는 KAS\\(Klaytn API Service\\)의 Anchor API를 소개하는 문서입니다. Anchor API는 서비스 체인 데이터의 신뢰성을 보장하기 위해 데이터 신뢰성을 증명할 수 있는 메타데이터를 Klaytn 메인 체인에 전송하는 기능을 제공합니다.  자세한 사용 예시는 [튜토리얼](링크)를 확인하십시오.    # Error Codes  ## 400: Bad Request   | Code | Messages |   | --- | --- |   | 1071010 | data don't exist 1071615 | its value is out of range; size 1072100 | same payload ID or payload was already anchored 1072101 | all configured accounts have insufficient funds |
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.16
 *
 * Do not edit the class manually.
 *
 */

;(function(root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(['../../ApiClient'], factory)
    } else if (typeof module === 'object' && module.exports) {
        // CommonJS-like environments that support module.exports, like Node.
        module.exports = factory(require('../../ApiClient'))
    } else {
        // Browser globals (root is window)
        if (!root.AnchorApi) {
            root.AnchorApi = {}
        }
        root.AnchorApi.OperatorSetting = factory(root.AnchorApi.ApiClient)
    }
})(this, function(ApiClient) {
    /**
     * The OperatorSetting model module.
     * @class OperatorSetting
     * @version 1.0
     */

    /**
     * Constructs a new <code>OperatorSetting</code>.
     * 오퍼레이터 결제 정보
     * @alias OperatorSetting
     * @class
     * @param useGlobalFeePayer {Boolean} 글로벌 대납 계정 사용 여부
     * @param useOperator {Boolean} 오퍼레이터 결제 사용 여부
     */
    const OperatorSetting = function(useGlobalFeePayer, useOperator) {
        this.useGlobalFeePayer = useGlobalFeePayer
        this.useOperator = useOperator
    }

    /**
     * Constructs a <code>OperatorSetting</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {OperatorSetting} obj Optional instance to populate.
     * @return {OperatorSetting} The populated <code>OperatorSetting</code> instance.
     * @memberof OperatorSetting
     */
    OperatorSetting.constructFromObject = function(data, obj) {
        if (data) {
            obj = obj || new OperatorSetting()
            if (data.hasOwnProperty('useGlobalFeePayer')) obj.useGlobalFeePayer = ApiClient.convertToType(data.useGlobalFeePayer, 'Boolean')
            if (data.hasOwnProperty('useOperator')) obj.useOperator = ApiClient.convertToType(data.useOperator, 'Boolean')
        }
        return obj
    }

    /**
     * 글로벌 대납 계정 사용 여부
     * @member {Boolean} useGlobalFeePayer
     * @memberof OperatorSetting
     */
    OperatorSetting.prototype.useGlobalFeePayer = undefined

    /**
     * 오퍼레이터 결제 사용 여부
     * @member {Boolean} useOperator
     * @memberof OperatorSetting
     */
    OperatorSetting.prototype.useOperator = undefined

    return OperatorSetting
})
