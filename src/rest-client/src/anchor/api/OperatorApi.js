/**
 * Anchor API
 * # Introduction This document describes KAS (Klaytn API Service) Anchor API. Anchor API provides features sending metadata available to verify data reliability to ensure the reliability of service chain data to Klaytn main chain.  For more details on using the Anchor API, please refer to [Tutorial](https://docs.klaytnapi.com/tutorial/anchor-api).    # Error Codes  ## 400: Bad Request   | Code | Messages |   | --- | --- |   | 1071010 | data don't exist 1071615 | its value is out of range; size 1072100 | same payload ID or payload was already anchored 1072101 | all configured accounts have insufficient funds |
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

const ApiClient = require('../../ApiClient')
const ErrorResponse = require('../model/ErrorResponse')
const Operator = require('../model/Operator')
const Operators = require('../model/Operators')

/**
 * Operator service.
 * @class OperatorApi
 * @version 1.0
 */
class OperatorApi {
    /**
     * Constructs a new OperatorApi.
     * @alias OperatorApi
     * @class
     * @param {ApiClient} [apiClient] Optional API client implementation to use,
     * default to {@link ApiClient#instance} if unspecified.
     */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance
    }

    /**
     * Callback function to receive the result of the getOperator operation.
     * @callback OperatorApi~getOperatorCallback
     * @param {String} error Error message, if any.
     * @param {Operator} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the specific operator
     * Retrieve the operator settings and a balance of the operator account.
     * @param {OperatorApi~getOperatorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Operator}
     */
    getOperator(xChainId, operatorId, callback) {
        const postBody = null

        const pathParams = {
            'operator-id': operatorId,
        }
        const queryParams = {}
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = []
        const accepts = ['application/json']
        const returnType = Operator

        return this.apiClient.callApi(
            '/v1/operator/{operator-id}',
            'GET',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the retrieveOperators operation.
     * @callback OperatorApi~retrieveOperatorsCallback
     * @param {String} error Error message, if any.
     * @param {Operators} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of all operators
     * Retrieve the list of operators created and the setting values of each operator.&lt;p&gt;&lt;/p&gt;  ## Size&lt;p&gt;&lt;/p&gt;  * The query parameter &#x60;size&#x60; is optional (Min &#x3D; 1, Max &#x3D; 1000, Default &#x3D; 100)&lt;br&gt; * Returns an error when given a negative number&lt;br&gt; * Uses default value (&#x60;size&#x3D;100&#x60;) when &#x60;size&#x3D;0&#x60;&lt;br&gt; * Uses the maximum value (&#x60;size&#x3D;1000&#x60;) when given a value higher than the maximum value&lt;br&gt;
     * @param {Object} opts Optional parameters
     * @param {OperatorApi~retrieveOperatorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Operators}
     */
    retrieveOperators(xChainId, opts, callback) {
        opts = opts || {}
        const postBody = null

        const pathParams = {}
        const queryParams = {
            size: opts.size,
            cursor: opts.cursor,
            'from-timestamp': opts.fromTimestamp,
            'to-timestamp': opts.toTimestamp,
        }
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = []
        const accepts = ['application/json']
        const returnType = Operators

        return this.apiClient.callApi(
            '/v1/operator',
            'GET',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
}
module.exports = OperatorApi
