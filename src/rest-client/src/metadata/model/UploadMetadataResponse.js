/**
 * Metadata API
 * # Introduction  The Metadata API helps BApp (Blockchain Application) developers to manage assets and metadata for their tokens.  Asset and metadata are used when you mint Klaytn's [KIP-17](https://kips.klaytn.com/KIPs/kip-17) Tokens (NFTs), [KIP-37](https://kips.klaytn.com/KIPs/kip-37) Tokens (MTs).  An asset refers to an image or a video file of an NFT or MT. When you mint an NFT or MT, you first have to upload the asset and include the returned asset URI in the metadata when minting the token. Metadata originally refers to \"data of data\". In the context of NFTs or MTs, it refers to the properties (name, description, image URL etc.) of the tokens. It is stored in JSON format.  Metadata API enables you to do the following actions: - upload assets - upload metadata - provide an externally accessible URI for the assets and metadata  # Error Code This section contains the errors that might occur when using Metadata API. KAS uses [HTTP status codes](https://developer.mozilla.org/en/docs/Web/HTTP/Status). Error code tables can be found [here](#tag/err-400).
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

 const ApiClient = require('../../ApiClient')

 /**
  * The UploadMetadataResponse model module.
  * @class UploadMetadataResponse
  * @version 1.0
  */
 class UploadMetadataResponse {
     /**
      * Constructs a new <code>UploadMetadataResponse</code>.
      * @alias UploadMetadataResponse
      * @class
      */
 
     constructor() {}
 
     /**
      * Constructs a <code>UploadMetadataResponse</code> from a plain JavaScript object, optionally creating a new instance.
      * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
      * @param {Object} data The plain JavaScript object bearing properties of interest.
      * @param {UploadMetadataResponse} obj Optional instance to populate.
      * @return {UploadMetadataResponse} The populated <code>UploadMetadataResponse</code> instance.
      * @memberof UploadMetadataResponse
      */
     static constructFromObject(data, obj) {
         if (data) {
             obj = obj || new UploadMetadataResponse()
 
             if (data.hasOwnProperty('filename')) {
                 obj.filename = ApiClient.convertToType(data.filename, 'String')
             }
             if (data.hasOwnProperty('contentType')) {
                 obj.contentType = ApiClient.convertToType(data.contentType, 'String')
             }
             if (data.hasOwnProperty('uri')) {
                 obj.uri = ApiClient.convertToType(data.uri, 'String')
             }
         }
         return obj
     }
 }
 
 /**
  * File name of the metadata
  * @type {String}
  * @memberof UploadMetadataResponse
  */
 UploadMetadataResponse.prototype.filename = undefined
 /**
  * Content type of the metadata
  * @type {String}
  * @memberof UploadMetadataResponse
  */
 UploadMetadataResponse.prototype.contentType = undefined
 /**
  * Externally accessible URI of the metadata
  * @type {String}
  * @memberof UploadMetadataResponse
  */
 UploadMetadataResponse.prototype.uri = undefined
 
 module.exports = UploadMetadataResponse

