/*
 * Token History API
 * # Introduction  Token History API allows you to query the transaction history of KLAY, FTs (KIP-7 and Labelled ERC-20), NFTs (KIP-17 and Labelled ERC-721), and MTs (KIP-37 and Labelled ERC-1155). You can track KLAY's transaction history or retrieve NFT-related data of a certain EOA.   For more details on using Token History API, please refer to the [Tutorial](https://docs.klaytnapi.com/tutorial).   For any inquiries on this document or KAS in general, please visit [Developer Forum](https://forum.klaytn.com/).
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

;(function(root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(['../../ApiClient', '../model/FtContract', '../model/Transaction'], factory)
    } else if (typeof module === 'object' && module.exports) {
        // CommonJS-like environments that support module.exports, like Node.
        module.exports = factory(
            require('../../ApiClient'),
            require('./FtContract'),
            require('./NftContract'),
            require('./MtContract'),
            require('./Transaction')
        )
    } else {
        // Browser globals (root is window)
        if (!root.TokenHistoryApi) {
            root.TokenHistoryApi = {}
        }
        root.TokenHistoryApi.TransferItem = factory(
            root.TokenHistoryApi.ApiClient,
            root.TokenHistoryApi.FtContract,
            root.TokenHistoryApi.NftContract,
            root.TokenHistoryApi.MtContract,
            root.TokenHistoryApi.Transaction
        )
    }
})(this, function(ApiClient, FtContract, NftContract, MtContract, Transaction) {
    /**
     * The TransferItem model module.
     * @class TransferItem
     * @version 1.0
     */

    /**
     * Constructs a new <code>TransferItem</code>.
     * @alias TransferItem
     * @class
     */
    const TransferItem = function() {}

    /**
     * Constructs a <code>TransferItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {TransferItem} obj Optional instance to populate.
     * @return {TransferItem} The populated <code>TransferItem</code> instance.
     * @memberof TransferItem
     */
    TransferItem.constructFromObject = function(data, obj) {
        if (data) {
            obj = obj || new TransferItem()
            if (data.hasOwnProperty('feePayer')) obj.feePayer = ApiClient.convertToType(data.feePayer, 'String')
            if (data.hasOwnProperty('feeRatio')) obj.feeRatio = ApiClient.convertToType(data.feeRatio, 'Number')
            if (data.hasOwnProperty('fee')) obj.fee = ApiClient.convertToType(data.fee, 'String')
            if (data.hasOwnProperty('from')) obj.from = ApiClient.convertToType(data.from, 'String')
            if (data.hasOwnProperty('to')) obj.to = ApiClient.convertToType(data.to, 'String')
            if (data.hasOwnProperty('transactionHash')) obj.transactionHash = ApiClient.convertToType(data.transactionHash, 'String')
            if (data.hasOwnProperty('transactionIndex')) obj.transactionIndex = ApiClient.convertToType(data.transactionIndex, 'Number')
            if (data.hasOwnProperty('transferType')) obj.transferType = ApiClient.convertToType(data.transferType, 'String')
            if (data.hasOwnProperty('typeInt')) obj.typeInt = ApiClient.convertToType(data.typeInt, 'Number')
            if (data.hasOwnProperty('value')) obj.value = ApiClient.convertToType(data.value, 'String')
            if (data.hasOwnProperty('contract')) {
                switch (data.transferType) {
                    case 'nft':
                        obj.contract = NftContract.constructFromObject(data.contract)
                        break
                    case 'ft':
                        obj.contract = FtContract.constructFromObject(data.contract)
                        break
                    case 'mt':
                        obj.contract = MtContract.constructFromObject(data.contract)
                        break
                    default:
                        throw new Error(`Not supported trasnfer type: ${data.transferType}`)
                }
            }
            if (data.hasOwnProperty('formattedValue')) obj.formattedValue = ApiClient.convertToType(data.formattedValue, 'String')
            if (data.hasOwnProperty('transaction')) obj.transaction = Transaction.constructFromObject(data.transaction)
            if (data.hasOwnProperty('tokenId')) obj.tokenId = ApiClient.convertToType(data.tokenId, 'String')
            if (data.hasOwnProperty('operator')) obj.operator = ApiClient.convertToType(data.operator, 'String')
            if (data.hasOwnProperty('ids')) obj.ids = ApiClient.convertToType(data.ids, ['String'])
            if (data.hasOwnProperty('values')) obj.values = ApiClient.convertToType(data.values, ['String'])
        }
        return obj
    }

    /**
     * Fee delegation account address (20-byte)
     * @type {String}
     * @memberof TransferItem
     */
    TransferItem.prototype.feePayer = undefined

    /**
     * Fee delegation ratio
     * @type {Number}
     * @memberof TransferItem
     */
    TransferItem.prototype.feeRatio = undefined

    /**
     * Gas fee
     * @type {String}
     * @memberof TransferItem
     */
    TransferItem.prototype.fee = undefined

    /**
     * Sender EOA (20-byte)
     * @type {String}
     * @memberof TransferItem
     */
    TransferItem.prototype.from = undefined

    /**
     * Receiver EOA (20-byte)
     * @type {String}
     * @memberof TransferItem
     */
    TransferItem.prototype.to = undefined

    /**
     * Transaction hash
     * @type {String}
     * @memberof TransferItem
     */
    TransferItem.prototype.transactionHash = undefined

    /**
     * Transaction index
     * @type {Number}
     * @memberof TransferItem
     */
    TransferItem.prototype.transactionIndex = undefined

    /**
     * Transactino type
     * @type {String}
     * @memberof TransferItem
     */
    TransferItem.prototype.transferType = undefined

    /**
     * Transaction type
     * @type {Number}
     * @memberof TransferItem
     */
    TransferItem.prototype.typeInt = undefined

    /**
     * Amount of KLAY transferred (in hexadecimal)
     * @type {String}
     * @memberof TransferItem
     */
    TransferItem.prototype.value = undefined

    /**
     * @type {FtContract}
     * @memberof TransferItem
     */
    TransferItem.prototype.contract = undefined

    /**
     * Formatted value with contracts `decimals`
     * @type {String}
     * @memberof TransferItem
     */
    TransferItem.prototype.formattedValue = undefined

    /**
     * @type {Transaction}
     * @memberof TransferItem
     */
    TransferItem.prototype.transaction = undefined

    /**
     * Token Identifier (in hexadecimal)
     * @type {String}
     * @memberof TransferItem
     */
    TransferItem.prototype.tokenId = undefined

    /**
     * Validator EOA (20-byte)
     * @type {String}
     * @memberof TransferItem
     */
    TransferItem.prototype.operator = undefined

    /**
     * Array of token identifiers (in hexadecimal)
     * @type {Array.<String>}
     * @memberof TransferItem
     */
    TransferItem.prototype.ids = undefined

    /**
     * Array of sent tokens (in hexadecimal)
     * @type {Array.<String>}
     * @memberof TransferItem
     */
    TransferItem.prototype.values = undefined

    return TransferItem
})
