/*
 * Token History API
 * # Introduction  Token History API allows you to query the transaction history of KLAY, FTs (KIP-7 and Labelled ERC-20), NFTs (KIP-17 and Labelled ERC-721), and MTs (KIP-37 and Labelled ERC-1155). You can track KLAY's transaction history or retrieve NFT-related data of a certain EOA.   For more details on using Token History API, please refer to the [Tutorial](https://docs.klaytnapi.com/tutorial).   For any inquiries on this document or KAS in general, please visit [Developer Forum](https://forum.klaytn.com/).
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

;(function(root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(['../../ApiClient', '../model/FtContract', '../model/Transaction'], factory)
    } else if (typeof module === 'object' && module.exports) {
        // CommonJS-like environments that support module.exports, like Node.
        module.exports = factory(require('../../ApiClient'), require('./FtContract'), require('./Transaction'))
    } else {
        // Browser globals (root is window)
        if (!root.TokenHistoryApi) {
            root.TokenHistoryApi = {}
        }
        root.TokenHistoryApi.FtTransfer = factory(
            root.TokenHistoryApi.ApiClient,
            root.TokenHistoryApi.FtContract,
            root.TokenHistoryApi.Transaction
        )
    }
})(this, function(ApiClient, FtContract, Transaction) {
    /**
     * The FtTransfer model module.
     * @class FtTransfer
     * @version 1.0
     */

    /**
     * Constructs a new <code>FtTransfer</code>.
     * @alias FtTransfer
     * @class
     * @param contract {FtContract}
     * @param formattedValue {String} Formatted value with contracts `decimals`
     * @param from {String} Sender EOA (20-byte)
     * @param to {String} Receiver EOA (20-byte)
     * @param transaction {Transaction}
     * @param transferType {String} Transaction type
     * @param value {String} Number of tokens sent (in hexadecimal)
     */
    const FtTransfer = function(contract, formattedValue, from, to, transaction, transferType, value) {
        this.contract = contract
        this.formattedValue = formattedValue
        this.from = from
        this.to = to
        this.transaction = transaction
        this.transferType = transferType
        this.value = value
    }

    /**
     * Constructs a <code>FtTransfer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {FtTransfer} obj Optional instance to populate.
     * @return {FtTransfer} The populated <code>FtTransfer</code> instance.
     * @memberof FtTransfer
     */
    FtTransfer.constructFromObject = function(data, obj) {
        if (data) {
            obj = obj || new FtTransfer()
            if (data.hasOwnProperty('contract')) obj.contract = FtContract.constructFromObject(data.contract)
            if (data.hasOwnProperty('formattedValue')) obj.formattedValue = ApiClient.convertToType(data.formattedValue, 'String')
            if (data.hasOwnProperty('from')) obj.from = ApiClient.convertToType(data.from, 'String')
            if (data.hasOwnProperty('to')) obj.to = ApiClient.convertToType(data.to, 'String')
            if (data.hasOwnProperty('transaction')) obj.transaction = Transaction.constructFromObject(data.transaction)
            if (data.hasOwnProperty('transferType')) obj.transferType = ApiClient.convertToType(data.transferType, 'String')
            if (data.hasOwnProperty('value')) obj.value = ApiClient.convertToType(data.value, 'String')
        }
        return obj
    }

    /**
     * @type {FtContract}
     * @memberof FtTransfer
     */
    FtTransfer.prototype.contract = undefined

    /**
     * Formatted value with contracts `decimals`
     * @type {String}
     * @memberof FtTransfer
     */
    FtTransfer.prototype.formattedValue = undefined

    /**
     * Sender EOA (20-byte)
     * @type {String}
     * @memberof FtTransfer
     */
    FtTransfer.prototype.from = undefined

    /**
     * Receiver EOA (20-byte)
     * @type {String}
     * @memberof FtTransfer
     */
    FtTransfer.prototype.to = undefined

    /**
     * @type {Transaction}
     * @memberof FtTransfer
     */
    FtTransfer.prototype.transaction = undefined

    /**
     * Transaction type
     * @type {String}
     * @memberof FtTransfer
     */
    FtTransfer.prototype.transferType = undefined

    /**
     * Number of tokens sent (in hexadecimal)
     * @type {String}
     * @memberof FtTransfer
     */
    FtTransfer.prototype.value = undefined

    return FtTransfer
})
