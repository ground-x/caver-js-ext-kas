/**
 * Token History API
 * # Introduction  Token History API allows you to query the transaction history of KLAY, FTs (KIP-7 and Labelled ERC-20), NFTs (KIP-17 and Labelled ERC-721), and MTs (KIP-37 and Labelled ERC-1155). You can track KLAY's transaction history or retrieve NFT-related data of a certain EOA.   For more details on using Token History API, please refer to the [Tutorial](https://docs.klaytnapi.com/tutorial).   For any inquiries on this document or KAS in general, please visit [Developer Forum](https://forum.klaytn.com/).
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

const ApiClient = require('../../ApiClient')

/**
 * The NftContractDetail model module.
 * @class NftContractDetail
 * @version 1.0
 */
class NftContractDetail {
    /**
     * Constructs a new <code>NftContractDetail</code>.
     * @alias NftContractDetail
     * @class
     * @param address {String} Contract address (20-byte)
     * @param name {String} Token name
     * @param symbol {String} Token symbol
     * @param totalSupply {String} Total issued amount (in hexadecimal)
     * @param createdAt {Number} Time of labelling (timestamp)
     * @param updatedAt {Number} Last change in token in labelling (timestamp)
     * @param deletedAt {Number} Time of removal of labelling (timestamp); 0 if not removed
     * @param type {String} Contract type (KIP-17, ERC-721)
     * @memberof NftContractDetail
     * @param status {String} Contract labelling status (completed, processing, failed, cancelled)
     */

    constructor(address, name, symbol, totalSupply, createdAt, updatedAt, deletedAt, type, status) {
        this.address = address
        this.name = name
        this.symbol = symbol
        this.totalSupply = totalSupply
        this.createdAt = createdAt
        this.updatedAt = updatedAt
        this.deletedAt = deletedAt
        this.type = type
        this.status = status
    }

    /**
     * Constructs a <code>NftContractDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {NftContractDetail} obj Optional instance to populate.
     * @return {NftContractDetail} The populated <code>NftContractDetail</code> instance.
     * @memberof NftContractDetail
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NftContractDetail()

            if (data.hasOwnProperty('address')) {
                obj.address = ApiClient.convertToType(data.address, 'String')
            }
            if (data.hasOwnProperty('name')) {
                obj.name = ApiClient.convertToType(data.name, 'String')
            }
            if (data.hasOwnProperty('symbol')) {
                obj.symbol = ApiClient.convertToType(data.symbol, 'String')
            }
            if (data.hasOwnProperty('totalSupply')) {
                obj.totalSupply = ApiClient.convertToType(data.totalSupply, 'String')
            }
            if (data.hasOwnProperty('createdAt')) {
                obj.createdAt = ApiClient.convertToType(data.createdAt, 'Number')
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj.updatedAt = ApiClient.convertToType(data.updatedAt, 'Number')
            }
            if (data.hasOwnProperty('deletedAt')) {
                obj.deletedAt = ApiClient.convertToType(data.deletedAt, 'Number')
            }
            if (data.hasOwnProperty('type')) {
                obj.type = ApiClient.convertToType(data.type, 'String')
            }
            if (data.hasOwnProperty('status')) {
                obj.status = ApiClient.convertToType(data.status, 'String')
            }
        }
        return obj
    }
}

/**
 * Contract address (20-byte)
 * @type {String}
 * @memberof NftContractDetail
 */
NftContractDetail.prototype.address = undefined
/**
 * Token name
 * @type {String}
 * @memberof NftContractDetail
 */
NftContractDetail.prototype.name = undefined
/**
 * Token symbol
 * @type {String}
 * @memberof NftContractDetail
 */
NftContractDetail.prototype.symbol = undefined
/**
 * Total issued amount (in hexadecimal)
 * @type {String}
 * @memberof NftContractDetail
 */
NftContractDetail.prototype.totalSupply = undefined
/**
 * Time of labelling (timestamp)
 * @type {Number}
 * @memberof NftContractDetail
 */
NftContractDetail.prototype.createdAt = undefined
/**
 * Last change in token in labelling (timestamp)
 * @type {Number}
 * @memberof NftContractDetail
 */
NftContractDetail.prototype.updatedAt = undefined
/**
 * Time of removal of labelling (timestamp); 0 if not removed
 * @type {Number}
 * @memberof NftContractDetail
 */
NftContractDetail.prototype.deletedAt = undefined
/**
 * Contract type (KIP-17, ERC-721)
 * @type {String}
 * @memberof NftContractDetail
 */
NftContractDetail.prototype.type = undefined
/**
 * Contract labelling status (completed, processing, failed, cancelled)
 * @type {String}
 * @memberof NftContractDetail
 */
NftContractDetail.prototype.status = undefined

module.exports = NftContractDetail
