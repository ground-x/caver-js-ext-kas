/*
 * Token History API
 * # Introduction  Token History API allows you to query the transaction history of KLAY, FTs (KIP-7 and Labelled ERC-20), NFTs (KIP-17 and Labelled ERC-721), and MTs (KIP-37 and Labelled ERC-1155). You can track KLAY's transaction history or retrieve NFT-related data of a certain EOA.   For more details on using Token History API, please refer to the [Tutorial](https://docs.klaytnapi.com/tutorial).   For any inquiries on this document or KAS in general, please visit [Developer Forum](https://forum.klaytn.com/).
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

;(function(root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(['../../ApiClient', '../model/MtContract', '../model/Transaction'], factory)
    } else if (typeof module === 'object' && module.exports) {
        // CommonJS-like environments that support module.exports, like Node.
        module.exports = factory(require('../../ApiClient'), require('./MtContract'), require('./Transaction'))
    } else {
        // Browser globals (root is window)
        if (!root.TokenHistoryApi) {
            root.TokenHistoryApi = {}
        }
        root.TokenHistoryApi.MtTransfer = factory(
            root.TokenHistoryApi.ApiClient,
            root.TokenHistoryApi.MtContract,
            root.TokenHistoryApi.Transaction
        )
    }
})(this, function(ApiClient, MtContract, Transaction) {
    /**
     * The MtTransfer model module.
     * @class MtTransfer
     * @version 1.0
     */

    /**
     * Constructs a new <code>MtTransfer</code>.
     * @alias MtTransfer
     * @class
     * @param contract {MtContract}
     * @param operator {String} Validator EOA (20-byte)
     * @param from {String} Sender EOA (20-byte)
     * @param to {String} Receiver EOA (20-byte)
     * @param transaction {Transaction}
     * @param transferType {String} Transaction type
     * @param ids {Array.<String>} Array of token identifiers (in hexadecimal)
     * @param values {Array.<String>} Array of sent tokens (in hexadecimal)
     */
    const MtTransfer = function(contract, operator, from, to, transaction, transferType, ids, values) {
        this.contract = contract
        this.operator = operator
        this.from = from
        this.to = to
        this.transaction = transaction
        this.transferType = transferType
        this.ids = ids
        this.values = values
    }

    /**
     * Constructs a <code>MtTransfer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {MtTransfer} obj Optional instance to populate.
     * @return {MtTransfer} The populated <code>MtTransfer</code> instance.
     * @memberof MtTransfer
     */
    MtTransfer.constructFromObject = function(data, obj) {
        if (data) {
            obj = obj || new MtTransfer()
            if (data.hasOwnProperty('contract')) obj.contract = MtContract.constructFromObject(data.contract)
            if (data.hasOwnProperty('operator')) obj.operator = ApiClient.convertToType(data.operator, 'String')
            if (data.hasOwnProperty('from')) obj.from = ApiClient.convertToType(data.from, 'String')
            if (data.hasOwnProperty('to')) obj.to = ApiClient.convertToType(data.to, 'String')
            if (data.hasOwnProperty('transaction')) obj.transaction = Transaction.constructFromObject(data.transaction)
            if (data.hasOwnProperty('transferType')) obj.transferType = ApiClient.convertToType(data.transferType, 'String')
            if (data.hasOwnProperty('ids')) obj.ids = ApiClient.convertToType(data.ids, ['String'])
            if (data.hasOwnProperty('values')) obj.values = ApiClient.convertToType(data.values, ['String'])
        }
        return obj
    }

    /**
     * @type {MtContract}
     * @memberof MtTransfer
     */
    MtTransfer.prototype.contract = undefined

    /**
     * Validator EOA (20-byte)
     * @type {String}
     * @memberof MtTransfer
     */
    MtTransfer.prototype.operator = undefined

    /**
     * Sender EOA (20-byte)
     * @type {String}
     * @memberof MtTransfer
     */
    MtTransfer.prototype.from = undefined

    /**
     * Receiver EOA (20-byte)
     * @type {String}
     * @memberof MtTransfer
     */
    MtTransfer.prototype.to = undefined

    /**
     * @type {Transaction}
     * @memberof MtTransfer
     */
    MtTransfer.prototype.transaction = undefined

    /**
     * Transaction type
     * @type {String}
     * @memberof MtTransfer
     */
    MtTransfer.prototype.transferType = undefined

    /**
     * Array of token identifiers (in hexadecimal)
     * @type {Array.<String>}
     * @memberof MtTransfer
     */
    MtTransfer.prototype.ids = undefined

    /**
     * Array of sent tokens (in hexadecimal)
     * @type {Array.<String>}
     * @memberof MtTransfer
     */
    MtTransfer.prototype.values = undefined

    return MtTransfer
})
