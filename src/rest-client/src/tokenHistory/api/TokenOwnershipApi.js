/**
 * Token History API
 * # Introduction  Token History API allows you to query the transaction history of KLAY, FTs (KIP-7 and Labelled ERC-20), NFTs (KIP-17 and Labelled ERC-721), and MTs (KIP-37 and Labelled ERC-1155). You can track KLAY's transaction history or retrieve NFT-related data of a certain EOA.   For more details on using Token History API, please refer to the [Tutorial](https://docs.klaytnapi.com/tutorial).   For any inquiries on this document or KAS in general, please visit [Developer Forum](https://forum.klaytn.com/).
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

const ApiClient = require('../../ApiClient')
const ErrorResponse = require('../model/ErrorResponse')
const PageableContractSummary = require('../model/PageableContractSummary')
const PageableNftOwnershipChanges = require('../model/PageableNftOwnershipChanges')
const PageableTokenSummary = require('../model/PageableTokenSummary')

/**
 * TokenOwnership service.
 * @class TokenOwnershipApi
 * @version 1.0
 */
class TokenOwnershipApi {
    /**
     * Constructs a new TokenOwnershipApi.
     * @alias TokenOwnershipApi
     * @class
     * @param {ApiClient} [apiClient] Optional API client implementation to use,
     * default to {@link ApiClient#instance} if unspecified.
     */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance
    }

    /**
     * Callback function to receive the result of the getListOfContractByOwnerAddress operation.
     * @callback TokenOwnershipApi~getListOfContractByOwnerAddressCallback
     * @param {String} error Error message, if any.
     * @param {PageableContractSummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get contract data by  EOA
     * Selecting an EOA will fetch data of all contracts of tokens by EOA.&lt;p&gt;&lt;/p&gt;  * &#x60;ft&#x60;: &#x60;ft&#x60; balances existing in the contract will be included in the response&lt;br&gt; * &#x60;nft&#x60;: Tokens existing in the contract will be included in the response&lt;br&gt; * &#x60;mt&#x60;: Token balances existing in the contract will be included in the response&lt;p&gt;&lt;/p&gt;&lt;br&gt;  ## Size&lt;p&gt;&lt;/p&gt;  * The query parameter &#x60;size&#x60; is optional. (Min &#x3D; 1, Max &#x3D; 1000, Default &#x3D; 100)&lt;br&gt; * Returns an error when given a negative number&lt;br&gt; * Uses default (&#x60;size&#x3D;100&#x60;) when given a 0&lt;br&gt; * Uses the maximum value (&#x60;size&#x3D;1000&#x60;) when given a value higher than 1000&lt;br&gt;
     * @param {Object} opts Optional parameters
     * @param {TokenOwnershipApi~getListOfContractByOwnerAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link PageableContractSummary}
     */
    getListOfContractByOwnerAddress(xChainId, address, opts, callback) {
        opts = opts || {}
        const postBody = null

        const pathParams = {
            address: address,
        }
        const queryParams = {
            kind: opts.kind,
            size: opts.size,
            cursor: opts.cursor,
        }
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = []
        const accepts = ['application/json']
        const returnType = PageableContractSummary

        return this.apiClient.callApi(
            '/v2/account/{address}/contract',
            'GET',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the getListOfNftOwnershipChanges operation.
     * @callback TokenOwnershipApi~getListOfNftOwnershipChangesCallback
     * @param {String} error Error message, if any.
     * @param {PageableNftOwnershipChanges} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query ownership change history for certain NFTs
     * Get ownership change history of certain NFTs.&lt;p&gt;&lt;/p&gt;  ## Size&lt;p&gt;&lt;/p&gt;  * The query parameter &#x60;size&#x60; is optional. (Min &#x3D; 1, Max &#x3D; 1000, Default &#x3D; 100)&lt;br&gt; * Returns an error when given a negative number&lt;br&gt; * Uses default (&#x60;size&#x3D;100&#x60;) when given a 0&lt;br&gt; * Uses the maximum value (&#x60;size&#x3D;1000&#x60;) when given a value higher than 1000&lt;br&gt;
     * @param {Object} opts Optional parameters
     * @param {TokenOwnershipApi~getListOfNftOwnershipChangesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link PageableNftOwnershipChanges}
     */
    getListOfNftOwnershipChanges(xChainId, nftAddress, tokenId, opts, callback) {
        opts = opts || {}
        const postBody = null

        const pathParams = {
            'nft-address': nftAddress,
            'token-id': tokenId,
        }
        const queryParams = {
            size: opts.size,
            cursor: opts.cursor,
        }
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = []
        const accepts = ['application/json']
        const returnType = PageableNftOwnershipChanges

        return this.apiClient.callApi(
            '/v2/contract/nft/{nft-address}/token/{token-id}/history',
            'GET',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the getListOfTokenByOwnerAddress operation.
     * @callback TokenOwnershipApi~getListOfTokenByOwnerAddressCallback
     * @param {String} error Error message, if any.
     * @param {PageableTokenSummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get data of certain tokens for certain EOAs
     * Selecting an EOA will get all token data by EOA.&lt;p&gt;&lt;/p&gt;  * &#x60;ft&#x60;: &#x60;ft&#x60; balances existing in the contract will be included in the response&lt;br&gt; * &#x60;nft&#x60;: Tokens existing in the contract will be included in the response&lt;br&gt; * &#x60;mt&#x60;: Token balances existing in the contract will be included in the response&lt;p&gt;&lt;/p&gt;&lt;br&gt;  ## Size&lt;p&gt;&lt;/p&gt;  * The query parameter &#x60;size&#x60; is optional. (Min &#x3D; 1, Max &#x3D; 1000, Default &#x3D; 100)&lt;br&gt; * Returns an error when given a negative number&lt;br&gt; * Uses default (&#x60;size&#x3D;100&#x60;) when given a 0&lt;br&gt; * Uses the maximum value (&#x60;size&#x3D;1000&#x60;) when given a value higher than 1000&lt;br&gt;
     * @param {Object} opts Optional parameters
     * @param {TokenOwnershipApi~getListOfTokenByOwnerAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link PageableTokenSummary}
     */
    getListOfTokenByOwnerAddress(xChainId, address, opts, callback) {
        opts = opts || {}
        const postBody = null

        const pathParams = {
            address: address,
        }
        const queryParams = {
            kind: opts.kind,
            size: opts.size,
            'ca-filters': opts.caFilters,
            cursor: opts.cursor,
        }
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = []
        const accepts = ['application/json']
        const returnType = PageableTokenSummary

        return this.apiClient.callApi(
            '/v2/account/{address}/token',
            'GET',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
}
module.exports = TokenOwnershipApi
