/*
 * Token History API
 * # Introduction  Token History API는 KLAY, FT (KIP-7, Labeled ERC-20), NFT (KIP-17, Labeled ERC-721) 토큰 정보, 이들 토큰을 주고받은 기록을 조회하는 기능을 제공합니다. 여러분은 특정 EOA가 KLAY를 주고받은 기록을 확인하거나 EOA가 가지고 있는 NFT 정보를 불러오는 등 Token History API를 다양하게 활용할 수 있습니다.   Token History API 사용에 관한 자세한 내용은 [튜토리얼](https://klaytn.com)을 확인하십시오.   이 문서 혹은 KAS에 관한 문의는 [개발자 포럼](https://forum.klaytn.com/)을 방문해 도움을 받으십시오
 *
 * OpenAPI spec version: 0.7.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

;(function(root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define([
            '../../ApiClient',
            '../model/FtContractDetail',
            '../model/NftContractDetail',
            '../model/PageableFtContractDetails',
            '../model/PageableNftContractDetails',
        ], factory)
    } else if (typeof module === 'object' && module.exports) {
        // CommonJS-like environments that support module.exports, like Node.
        module.exports = factory(
            require('../../ApiClient'),
            require('../model/FtContractDetail'),
            require('../model/NftContractDetail'),
            require('../model/PageableFtContractDetails'),
            require('../model/PageableNftContractDetails')
        )
    } else {
        // Browser globals (root is window)
        if (!root.TokenHistoryApi) {
            root.TokenHistoryApi = {}
        }
        root.TokenHistoryApi.TokenContractApi = factory(
            root.TokenHistoryApi.ApiClient,
            root.TokenHistoryApi.FtContractDetail,
            root.TokenHistoryApi.NftContractDetail,
            root.TokenHistoryApi.PageableFtContractDetails,
            root.TokenHistoryApi.PageableNftContractDetails
        )
    }
})(this, function(ApiClient, FtContractDetail, NftContractDetail, PageableFtContractDetails, PageableNftContractDetails) {
    /**
     * TokenContract service.
     * @class TokenContractApi
     * @version 0.7.0
     */

    /**
     * Constructs a new TokenContractApi.
     * @alias TokenContractApi
     * @class
     * @param {ApiClient} [apiClient] Optional API client implementation to use,
     * default to {@link ApiClient#instance} if unspecified.
     */
    const exports = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance

        /**
         * Callback function to receive the result of the getFtContractDetail operation.
         * @callback TokenContractApi~getFtContractDetailCallback
         * @param {String} error Error message, if any.
         * @param {FtContractDetail} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * getFtContractDetail
         * 라벨링된 FT 컨트랙트 1개의 정보를 불러옵니다.
         * @param {String} xChainId Klaytn 네트워크 체인 ID (1001 or 8217)
         * @param {String} ftAddress FT 컨트랙트 주소
         * @param {TokenContractApi~getFtContractDetailCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link FtContractDetail}
         */
        this.getFtContractDetail = function(xChainId, ftAddress, callback) {
            const postBody = null

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling getFtContractDetail")
            }

            // verify the required parameter 'ftAddress' is set
            if (ftAddress === undefined || ftAddress === null) {
                throw new Error("Missing the required parameter 'ftAddress' when calling getFtContractDetail")
            }

            const pathParams = {
                'ft-address': ftAddress,
            }
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = FtContractDetail

            return this.apiClient.callApi(
                '/v2/contract/ft/{ft-address}',
                'GET',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the getListOfNftContracts operation.
         * @callback TokenContractApi~getListOfNftContractsCallback
         * @param {String} error Error message, if any.
         * @param {PageableNftContractDetails} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * getListOfNftContracts
         * 라벨링된 모든 NFT 컨트랙트들의 정보를 불러옵니다.
         * @param {String} xChainId Klaytn 체인 네트워크 ID (1001 or 8217)
         * @param {Object} opts Optional parameters
         * @param {String} opts.status 라벨링 상태 [completed, processing, failed, cancelled]
         * @param {String} opts.type 컨트랙트 타입 [KIP-17, ERC-721], 지정하지 않을 경우 모든 타입 반환
         * @param {Number} opts.size 응답 아이템 개수(min=1, max=1000, default=100)
         * @param {String} opts.cursor 응답 오프셋 (pagination)
         * @param {TokenContractApi~getListOfNftContractsCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link PageableNftContractDetails}
         */
        this.getListOfNftContracts = function(xChainId, opts, callback) {
            opts = opts || {}
            const postBody = null

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling getListOfNftContracts")
            }

            const pathParams = {}
            const queryParams = {
                status: opts.status,
                type: opts.type,
                size: opts.size,
                cursor: opts.cursor,
            }
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = PageableNftContractDetails

            return this.apiClient.callApi(
                '/v2/contract/nft',
                'GET',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the getListofFtContracts operation.
         * @callback TokenContractApi~getListofFtContractsCallback
         * @param {String} error Error message, if any.
         * @param {PageableFtContractDetails} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * getListofFtContracts
         * 라벨링된 모든 FT 컨트랙트들의 정보를 불러옵니다.
         * @param {String} xChainId Klaytn 체인 네트워크 ID (1001 or 8217)
         * @param {Object} opts Optional parameters
         * @param {String} opts.status 라벨링 상태 [completed, processing, failed, cancelled]
         * @param {String} opts.type 컨트랙트 타입 [KIP-7, ERC-20], 지정하지 않을 경우 모든 타입 반환
         * @param {Number} opts.size 응답 아이템 개수(min=1, max=1000, default=100)
         * @param {String} opts.cursor 특정 위치를 지정하기 위한 오프셋
         * @param {TokenContractApi~getListofFtContractsCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link PageableFtContractDetails}
         */
        this.getListofFtContracts = function(xChainId, opts, callback) {
            opts = opts || {}
            const postBody = null

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling getListofFtContracts")
            }

            const pathParams = {}
            const queryParams = {
                status: opts.status,
                type: opts.type,
                size: opts.size,
                cursor: opts.cursor,
            }
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = PageableFtContractDetails

            return this.apiClient.callApi(
                '/v2/contract/ft',
                'GET',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the getNftContractDetail operation.
         * @callback TokenContractApi~getNftContractDetailCallback
         * @param {String} error Error message, if any.
         * @param {NftContractDetail} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * getNftContractDetail
         * 라벨링된 NFT 컨트랙트 1개의 정보를 불러옵니다.
         * @param {String} xChainId Klaytn 체인 네트워크 ID (1001 or 8217)
         * @param {String} nftAddress NFT 컨트랙트 주소
         * @param {TokenContractApi~getNftContractDetailCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link NftContractDetail}
         */
        this.getNftContractDetail = function(xChainId, nftAddress, callback) {
            const postBody = null

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling getNftContractDetail")
            }

            // verify the required parameter 'nftAddress' is set
            if (nftAddress === undefined || nftAddress === null) {
                throw new Error("Missing the required parameter 'nftAddress' when calling getNftContractDetail")
            }

            const pathParams = {
                'nft-address': nftAddress,
            }
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = NftContractDetail

            return this.apiClient.callApi(
                '/v2/contract/nft/{nft-address}',
                'GET',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }
    }

    return exports
})
