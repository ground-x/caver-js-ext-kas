/*
 * Token History API
 * # Introduction  Token History API allows you to query the transaction history of KLAY, FTs (KIP-7 and Labelled ERC-20), NFTs (KIP-17 and Labelled ERC-721), and MTs (KIP-37 and Labelled ERC-1155). You can track KLAY's transaction history or retrieve NFT-related data of a certain EOA.   For more details on using Token History API, please refer to the [Tutorial](https://docs.klaytnapi.com/tutorial).   For any inquiries on this document or KAS in general, please visit [Developer Forum](https://forum.klaytn.com/).
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

;(function(root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define([
            '../../ApiClient',
            '../model/ErrorResponse',
            '../model/FtContractDetail',
            '../model/MtContractDetail',
            '../model/NftContractDetail',
            '../model/PageableFtContractDetails',
            '../model/PageableMtContractDetails',
            '../model/PageableNftContractDetails',
        ], factory)
    } else if (typeof module === 'object' && module.exports) {
        // CommonJS-like environments that support module.exports, like Node.
        module.exports = factory(
            require('../../ApiClient'),
            require('../model/ErrorResponse'),
            require('../model/FtContractDetail'),
            require('../model/MtContractDetail'),
            require('../model/NftContractDetail'),
            require('../model/PageableFtContractDetails'),
            require('../model/PageableMtContractDetails'),
            require('../model/PageableNftContractDetails')
        )
    } else {
        // Browser globals (root is window)
        if (!root.TokenHistoryApi) {
            root.TokenHistoryApi = {}
        }
        root.TokenHistoryApi.TokenContractApi = factory(
            root.TokenHistoryApi.ApiClient,
            root.TokenHistoryApi.ErrorResponse,
            root.TokenHistoryApi.FtContractDetail,
            root.TokenHistoryApi.MtContractDetail,
            root.TokenHistoryApi.NftContractDetail,
            root.TokenHistoryApi.PageableFtContractDetails,
            root.TokenHistoryApi.PageableMtContractDetails,
            root.TokenHistoryApi.PageableNftContractDetails
        )
    }
})(this, function(
    ApiClient,
    ErrorResponse,
    FtContractDetail,
    MtContractDetail,
    NftContractDetail,
    PageableFtContractDetails,
    PageableMtContractDetails,
    PageableNftContractDetails
) {
    /**
     * TokenContract service.
     * @class TokenContractApi
     * @version 1.0
     */

    /**
     * Constructs a new TokenContractApi.
     * @alias TokenContractApi
     * @class
     * @param {ApiClient} [apiClient] Optional API client implementation to use,
     * default to {@link ApiClient#instance} if unspecified.
     */
    const TokenContractApi = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance

        /**
         * Callback function to receive the result of the getFtContractDetail operation.
         * @callback TokenContractApi~getFtContractDetailCallback
         * @param {String} error Error message, if any.
         * @param {FtContractDetail} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * getFtContractDetail
         * Fetch the FT contract information of a given address
         * @param {String} xChainId Klaytn Network Chain ID (1001 or 8217)
         * @param {String} ftAddress FT Contract address
         * @param {TokenContractApi~getFtContractDetailCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link FtContractDetail}
         */
        this.getFtContractDetail = function(xChainId, ftAddress, callback) {
            const postBody = null

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling getFtContractDetail")
            }

            // verify the required parameter 'ftAddress' is set
            if (ftAddress === undefined || ftAddress === null) {
                throw new Error("Missing the required parameter 'ftAddress' when calling getFtContractDetail")
            }

            const pathParams = {
                'ft-address': ftAddress,
            }
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = FtContractDetail

            return this.apiClient.callApi(
                '/v2/contract/ft/{ft-address}',
                'GET',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the getListOfMtContracts operation.
         * @callback TokenContractApi~getListOfMtContractsCallback
         * @param {String} error Error message, if any.
         * @param {PageableMtContractDetails} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * getListOfMtContracts
         * Fetch data of labelled MTs for all contracts.<p></p>  ## Size<p></p>  * The query parameter `size` is optional. (Min = 1, Max = 1000, Default = 100)<br> * Returns an error when given a negative number<br> * Uses default (`size=100`) when given a 0<br> * Uses the maximum value (`size=1000`) when given a value higher than 1000<br>
         * @param {String} xChainId Klaytn Network Chain ID (1001 or 8217)
         * @param {Object} opts Optional parameters
         * @param {String} opts.status Labelling status [completed, processing, failed, cancelled]
         * @param {String} opts.type Contract type [KIP-37, ERC-1155], returns all types if not specified
         * @param {Number} opts.size Number of response items (min=1, max=1000, default=100)
         * @param {String} opts.cursor Response offset (pagination)
         * @param {TokenContractApi~getListOfMtContractsCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link PageableMtContractDetails}
         */
        this.getListOfMtContracts = function(xChainId, opts, callback) {
            opts = opts || {}
            const postBody = null

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling getListOfMtContracts")
            }

            const pathParams = {}
            const queryParams = {
                status: opts.status,
                type: opts.type,
                size: opts.size,
                cursor: opts.cursor,
            }
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = PageableMtContractDetails

            return this.apiClient.callApi(
                '/v2/contract/mt',
                'GET',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the getListOfNftContracts operation.
         * @callback TokenContractApi~getListOfNftContractsCallback
         * @param {String} error Error message, if any.
         * @param {PageableNftContractDetails} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * getListOfNftContracts
         * Fetch data of all labelled NFT contracts.<p></p>  ## Size<p></p>  * The query parameter `size` is optional. (Min = 1, Max = 1000, Default = 100)<br> * Returns an error when given a negative number<br> * Uses default (`size=100`) when given a 0<br> * Uses the maximum value (`size=1000`) when given a value higher than 1000<br>
         * @param {String} xChainId Klaytn Network Chain ID (1001 or 8217)
         * @param {Object} opts Optional parameters
         * @param {String} opts.status Labelling status [completed, processing, failed, cancelled]
         * @param {String} opts.type Contract type [KIP-17, ERC-721], returns all types if not specified
         * @param {Number} opts.size Number of response items (min=1, max=1000, default=100)
         * @param {String} opts.cursor Response offset (pagination)
         * @param {TokenContractApi~getListOfNftContractsCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link PageableNftContractDetails}
         */
        this.getListOfNftContracts = function(xChainId, opts, callback) {
            opts = opts || {}
            const postBody = null

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling getListOfNftContracts")
            }

            const pathParams = {}
            const queryParams = {
                status: opts.status,
                type: opts.type,
                size: opts.size,
                cursor: opts.cursor,
            }
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = PageableNftContractDetails

            return this.apiClient.callApi(
                '/v2/contract/nft',
                'GET',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the getListofFtContracts operation.
         * @callback TokenContractApi~getListofFtContractsCallback
         * @param {String} error Error message, if any.
         * @param {PageableFtContractDetails} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * getListofFtContracts
         * Fetch data of all labelled FT contracts.<p></p>  ## Size<p></p>  * The query parameter `size` is optional. (Min = 1, Max = 1000, Default = 100)<br> * Returns an error when given a negative number<br> * Uses default (`size=100`) when given a 0<br> * Uses the maximum value (`size=1000`) when given a value higher than 1000<br>
         * @param {String} xChainId Klaytn Network Chain ID (1001 or 8217)
         * @param {Object} opts Optional parameters
         * @param {String} opts.status Labelling status [completed, processing, failed, cancelled]
         * @param {String} opts.type Contract type [KIP-7, ERC-20], returns all types if not specified
         * @param {Number} opts.size Number of maximum response items (min=1, max=1000, default=100)
         * @param {String} opts.cursor Offset for specifying a certain position
         * @param {TokenContractApi~getListofFtContractsCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link PageableFtContractDetails}
         */
        this.getListofFtContracts = function(xChainId, opts, callback) {
            opts = opts || {}
            const postBody = null

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling getListofFtContracts")
            }

            const pathParams = {}
            const queryParams = {
                status: opts.status,
                type: opts.type,
                size: opts.size,
                cursor: opts.cursor,
            }
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = PageableFtContractDetails

            return this.apiClient.callApi(
                '/v2/contract/ft',
                'GET',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the getMtContractDetail operation.
         * @callback TokenContractApi~getMtContractDetailCallback
         * @param {String} error Error message, if any.
         * @param {MtContractDetail} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * getMtContractDetail
         * Fetch data of labelled MTs for a certain contract.
         * @param {String} xChainId Klaytn Network Chain ID (1001 or 8217)
         * @param {String} mtAddress
         * @param {TokenContractApi~getMtContractDetailCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link MtContractDetail}
         */
        this.getMtContractDetail = function(xChainId, mtAddress, callback) {
            const postBody = null

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling getMtContractDetail")
            }

            // verify the required parameter 'mtAddress' is set
            if (mtAddress === undefined || mtAddress === null) {
                throw new Error("Missing the required parameter 'mtAddress' when calling getMtContractDetail")
            }

            const pathParams = {
                'mt-address': mtAddress,
            }
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = MtContractDetail

            return this.apiClient.callApi(
                '/v2/contract/mt/{mt-address}',
                'GET',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the getNftContractDetail operation.
         * @callback TokenContractApi~getNftContractDetailCallback
         * @param {String} error Error message, if any.
         * @param {NftContractDetail} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * getNftContractDetail
         * Fetch data of labelled NFTs for a certain contract.
         * @param {String} xChainId Klaytn Network Chain ID (1001 or 8217)
         * @param {String} nftAddress NFT Contract address
         * @param {TokenContractApi~getNftContractDetailCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link NftContractDetail}
         */
        this.getNftContractDetail = function(xChainId, nftAddress, callback) {
            const postBody = null

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling getNftContractDetail")
            }

            // verify the required parameter 'nftAddress' is set
            if (nftAddress === undefined || nftAddress === null) {
                throw new Error("Missing the required parameter 'nftAddress' when calling getNftContractDetail")
            }

            const pathParams = {
                'nft-address': nftAddress,
            }
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = NftContractDetail

            return this.apiClient.callApi(
                '/v2/contract/nft/{nft-address}',
                'GET',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }
    }

    return TokenContractApi
})
