/*
 * Token History API
 * # Introduction  Token History API allows you to query the transaction history of KLAY, FTs (KIP-7 and Labelled ERC-20), NFTs (KIP-17 and Labelled ERC-721), and MTs (KIP-37 and Labelled ERC-1155). You can track KLAY's transaction history or retrieve NFT-related data of a certain EOA.   For more details on using Token History API, please refer to the [Tutorial](https://docs.klaytnapi.com/tutorial).   For any inquiries on this document or KAS in general, please visit [Developer Forum](https://forum.klaytn.com/).
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

;(function(root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(['../../ApiClient', '../model/ErrorResponse', '../model/PageableTransfers', '../model/Transfers'], factory)
    } else if (typeof module === 'object' && module.exports) {
        // CommonJS-like environments that support module.exports, like Node.
        module.exports = factory(
            require('../../ApiClient'),
            require('../model/ErrorResponse'),
            require('../model/PageableTransfers'),
            require('../model/Transfers')
        )
    } else {
        // Browser globals (root is window)
        if (!root.TokenHistoryApi) {
            root.TokenHistoryApi = {}
        }
        root.TokenHistoryApi.TokenHistoryApi = factory(
            root.TokenHistoryApi.ApiClient,
            root.TokenHistoryApi.ErrorResponse,
            root.TokenHistoryApi.PageableTransfers,
            root.TokenHistoryApi.Transfers
        )
    }
})(this, function(ApiClient, ErrorResponse, PageableTransfers, Transfers) {
    /**
     * TokenHistory service.
     * @class TokenHistoryApi
     * @version 1.0
     */

    /**
     * Constructs a new TokenHistoryApi.
     * @alias TokenHistoryApi
     * @class
     * @param {ApiClient} [apiClient] Optional API client implementation to use,
     * default to {@link ApiClient#instance} if unspecified.
     */
    const TokenHistoryApi = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance

        /**
         * Callback function to receive the result of the getTransfers operation.
         * @callback TokenHistoryApi~getTransfersCallback
         * @param {String} error Error message, if any.
         * @param {PageableTransfers} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * getTransfers
         * Query all transaction history. Transaction history is divided into KLAY Transfer (`KlayTransfer`), FT Transfer (`FtTransfer`), NFT Transfer (`NftTransfer`), and MT Transfer (`MtTransfer`). <p></p>  ## KlayTransfer in FT/NFT/MT transactions <p></p>  For transfers of FTs, NFTs, or MTs, `KlayTransfer` history will also be included in the query result. This is because FT/NFT/MT transfers are essentially execution of a corresponding contract function, and the response for the transfer includes `KlayTransfer`, which is equivalent to the transaction for sending KLAY. Since most transactions that execute contract functions do not usually send KLAY, the `value` of `KlayTransfer` that transfered NT, NFT, and MT may be zero. By using the `exclude-zero-klay=true` query, `KlayTransfer` can be excluded. <p></p>  ## Transaction type<p></p>  * You can choose KLAY, FT, NFT or MT by setting `kind` parameter to get transaction history of a certain type or a combination of types.<br> * If you don't set the `kind` parameter, all transaction types will be returned.<p></p><br>  ## Date range<p></p>  * `range` is queried in the form of `range={from},{to}`<br> * `{from}` and `{to}` will be considered Unix time in the case of a decimal number, and block number in the case of a hexadecimal number<br> * When there is no value for `{to}`, current time or the latest block number will be used.<br> * You can retrieve the transaction history from the past 6 months maximum. (for both Unix time and block number)<p></p><br>  ## Preset<p></p>  Preset is a collection of EOA and FT, NFT and MT contracts. You can use it to repetitively retrieve transaction history for certain accounts quickly and easily.<p></p>  * The parameter `presets` is a required parameter.<br> * [Preset](https://console.klaytnapi.com/en/service/th/preset/list) needs to be created on KAS Console in advance.<br> * You can check your Preset ID on KAS Console. For more information please visit [Preset](https://docs.klaytnapi.com/v/en/tutorial/th-api/th-api-token-history#preset).<p></p><br>  ## Size<p></p>  * The query parameter `size` is optional. (Min = 1, Max = 1000, Default = 100)<br> * Returns an error when given a negative number<br> * Uses default value (`size=100`) when `size=0`<br> * Uses the maximum value (`size=1000`) when given a value higher than the maximum value.<br>
         * @param {String} xChainId Klaytn Network Chain ID (1001 or 8217)
         * @param {String} presets (csv) Preset IDs to be used for query, Preset ID can be found on KAS Console
         * @param {Object} opts Optional parameters
         * @param {String} opts.kind (csv) Types to include [\"ft\", \"nft\", \"mt\"], query all types when not specified
         * @param {String} opts.range Set range (block number or unix time)
         * @param {Number} opts.size Number of maximum response items (min=1, max=1000, default=100)
         * @param {String} opts.cursor Response offset
         * @param {String} opts.excludeZeroKlay Exclude transfers of 0 KLAY if true (default=false)
         * @param {TokenHistoryApi~getTransfersCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link PageableTransfers}
         */
        this.getTransfers = function(xChainId, presets, opts, callback) {
            opts = opts || {}
            const postBody = null

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling getTransfers")
            }

            // verify the required parameter 'presets' is set
            if (presets === undefined || presets === null) {
                throw new Error("Missing the required parameter 'presets' when calling getTransfers")
            }

            const pathParams = {}
            const queryParams = {
                kind: opts.kind,
                range: opts.range,
                size: opts.size,
                cursor: opts.cursor,
                'exclude-zero-klay': opts.excludeZeroKlay,
                presets: presets,
            }
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = PageableTransfers

            return this.apiClient.callApi(
                '/v2/transfer',
                'GET',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the getTransfersByEoa operation.
         * @callback TokenHistoryApi~getTransfersByEoaCallback
         * @param {String} error Error message, if any.
         * @param {PageableTransfers} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * getTransfersByEoa
         * Query token transaction history for a certain EOA. Functionally, it is same as `GET /v2/transfer`. If the EOA received the token, `to` is same as the EOA, and if the EOA sent the token, `from` is the same as the EOA in the returned transfer object.     Transaction history is divided into KLAY transfer (`KlayTransfer`), FT transfer (`FtTransfer`), NFT transfer (`NftTransfer`), MT transfer (`MtTransfer`). For FT, NFT, MT transfers, history of `KlayTransfer` will be included in the result. `KlayTransfer` included in FT, NFT, MT transfers may have a `value` of 0. For more details, please refer to `GET /v2/transfer`.<p></p>  ## Transaction type<p></p>  * You can set the `kind` parameter to query different types of transactions.<br> * Not setting the `kind` parameter will query all types of transactions.<p></p><br>  ## Date range<p></p>  * `range` is queried in the form of `range={from},{to}`<br> * `{from}` and `{to}` will be considered Unix time in the case of a decimal number, and block number in the case of a hexadecimal number<br> * When there is no value for `{to}`, current time or the latest block number will be used.<br> * You can retrieve the transaction history from the past 6 months maximum. (for both unix time and block number)<p></p><br>  ## Size<p></p>  * The query parameter `size` is optional. (Min = 1, Max = 1000, Default = 100)<br> * Returns an error when given a negative number.<br> * Uses default value (`size=100`) when given a 0.<br> * Uses the maximum value (`size=1000`) when given a value higher than 1000.<br>
         * @param {String} xChainId Klaytn Network Chain ID (1001 or 8217)
         * @param {String} address EOA to query
         * @param {Object} opts Optional parameters
         * @param {String} opts.kind (csv) Types to include [\"ft\", \"nft\", \"mt\"], query all types when not specified
         * @param {String} opts.caFilter Contract addresses for FT, NFT or MT to retrieve, when selected, only the results whose `transferType` is \"ft\", \"nft\" or \"mt\" and the contract address matches the values in `ca-filter`. will be returned.
         * @param {String} opts.range (csv) Set query range (Block number or Unix time)
         * @param {Number} opts.size Number of maximum response items (min=1, max=1000, default=100)
         * @param {String} opts.cursor Offset for specifying a certain position
         * @param {String} opts.excludeZeroKlay Exclude transfers of 0 KLAY if true. (default=false)
         * @param {String} opts.fromOnly If true, return transactions when sender corresponds to the given address. (default=false)
         * @param {String} opts.toOnly If true, return transactions when recipient corresponds to the given address.. (default=false)
         * @param {TokenHistoryApi~getTransfersByEoaCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link PageableTransfers}
         */
        this.getTransfersByEoa = function(xChainId, address, opts, callback) {
            opts = opts || {}
            const postBody = null

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling getTransfersByEoa")
            }

            // verify the required parameter 'address' is set
            if (address === undefined || address === null) {
                throw new Error("Missing the required parameter 'address' when calling getTransfersByEoa")
            }

            const pathParams = {
                address: address,
            }
            const queryParams = {
                kind: opts.kind,
                'ca-filter': opts.caFilter,
                range: opts.range,
                size: opts.size,
                cursor: opts.cursor,
                'exclude-zero-klay': opts.excludeZeroKlay,
                'from-only': opts.fromOnly,
                'to-only': opts.toOnly,
            }
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = PageableTransfers

            return this.apiClient.callApi(
                '/v2/transfer/account/{address}',
                'GET',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the getTransfersByTxHash operation.
         * @callback TokenHistoryApi~getTransfersByTxHashCallback
         * @param {String} error Error message, if any.
         * @param {Transfers} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * getTransfersByTxHash
         * Get transaction history by transaction hash. Transaction history is divided into KLAY transfer (`KlayTransfer`), FT transfer (`FtTransfer`), NFT transfer (`NftTransfer`), MT transfer (`MtTransfer`). For FT, NFT, MT transfers, history of `KlayTransfer` will be included in the result. `KlayTransfer` included in FT, NFT, MT transfers may have a `value` of 0. For more details, please refer to `GET /v2/transfer`.
         * @param {String} xChainId Klaytn Network Chain ID (1001 or 8217)
         * @param {String} transactionHash Transaction hash to query
         * @param {TokenHistoryApi~getTransfersByTxHashCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link Transfers}
         */
        this.getTransfersByTxHash = function(xChainId, transactionHash, callback) {
            const postBody = null

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling getTransfersByTxHash")
            }

            // verify the required parameter 'transactionHash' is set
            if (transactionHash === undefined || transactionHash === null) {
                throw new Error("Missing the required parameter 'transactionHash' when calling getTransfersByTxHash")
            }

            const pathParams = {
                'transaction-hash': transactionHash,
            }
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = Transfers

            return this.apiClient.callApi(
                '/v2/transfer/tx/{transaction-hash}',
                'GET',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }
    }

    return TokenHistoryApi
})
