/**
 * Wallet API
 * # Introduction Wallet API is an API for creating and managing Klaytn accounts as well as sending transactions. If you create your Klaytn account using Wallet API, you don't have to manage your private key yourself. Wallet API provides a wallet for safe storage of your Klaytn account private keys that you would need to use BApps. For more details on how to use Wallet API, please refer to this [tutorial](https://docs.klaytnapi.com/v/en/tutorial).  Wallet API can be divided into the Account part, which creates and manages Klaytn accounts, and the Transaction part, which sends different kinds of transactions.  Wallet API creates, deletes and monitors Klaytn accounts and updates the accounts to multisig, and manages all private keys for all accounts registered on KAS.  Wallet API can also create transaction to send it to Klaytn. These include transactions sent from multisig accounts. In case of muiltisig accounts, a transaction will automatically be sent to Klaytn once \\(Threshold\\) is met. For more detail, please refer to this [tutorial](https://docs.klaytnapi.com/v/en/tutorial).  There are mainly two types of transactions: basic transactions and fee delegation transactions. Fee delegation transactions include Global Fee Delegation transaction and user fee deletation transaction. With the Global Fee Delegation transaction scheme, the transaction fee will initially be paid by GroundX and then be charged to you at a later date. With the User Fee Delegation transaction scheme, you create an account that pays the transaction fees on behalf of the users when a transaction.  The functionalities and limits of Wallet API are shown below:  | Version | Item | Description | | :--- | :--- | :--- | | 2.0 | Limits | Supports Cypress(Mainnet), Baobab(Testnet) \\ Doesn't support (Service Chain \\) | |  |  | Doesn't support account management for external custodial keys | |  |  | Doesn't support multisig for RLP encoded transactions | |  | Account management | Create, retrieve and delete account | |  |  | Multisig account update | |  | Managing transaction | [Basic](https://ko.docs.klaytn.com/klaytn/design/transactions/basic) creating and sending transaction | |  |  | [FeeDelegatedWithRatio](https://ko.docs.klaytn.com/klaytn/design/transactions/partial-fee-delegation) creating and sending transaction | |  |  | RLP encoded transaction\\([Legacy](https://ko.docs.klaytn.com/klaytn/design/transactions/basic#txtypelegacytransaction), [Basic](https://ko.docs.klaytn.com/klaytn/design/transactions/basic), [FeeDelegatedWithRatio](https://ko.docs.klaytn.com/klaytn/design/transactions/partial-fee-delegation)\\) creating and sending | |  |  | Managing and sending multisig transactions | |  | Administrator | Manage resource pool\\(create, query pool, delete, retrieve account \\) |
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

const ApiClient = require('../../ApiClient')

/**
 * The FDTransactionWithCurrencyResult model module.
 * @class FDTransactionWithCurrencyResult
 * @version 1.0
 */
class FDTransactionWithCurrencyResult {
    /**
     * Constructs a new <code>FDTransactionWithCurrencyResult</code>.
     * Result fee delegation transactions and KLAY converted into different currencies based on the rates at the time of sending the transaction.
     * @alias FDTransactionWithCurrencyResult
     * @class
     * @param chainId {Number}
     * @param chargedByKlay {String} Fee delegation cost in KLAY
     * @param chargedByKrw {String} Fee delegation cost in KRW
     * @param chargedByPeb {String} Fee delegation cost in Peb
     * @param chargedByUsd {String} Fee delegation cost in USD
     * @param feePayer {String} FeePayer's Klaytn account address
     * @param from {String} Transaction sender's Klaytn account address
     * @param gasPrice {String} The cost of gas used for sending the transaction
     * @param gasUsed {String} Amount of gas used for sending the transaction
     * @param krw {Number} KLAY/KRW rate at the time of sending the transaction (previous close)
     * @param status {String} Transaction status
     * @param timestamp {Number} Timestamp of when the transaction was processed (in sec.)
     * @param transactionHash {String} Transaction hash
     * @param typeInt {Number} The number to indicate the transaction type. For more details on transaction types, refer to [link](https://docs.klaytn.com/klaytn/design/transactions).
     * @param usd {Number} KLAY/USD rate at the time of sending the transaction (previous close)
     */

    constructor(
        chainId,
        chargedByKlay,
        chargedByKrw,
        chargedByPeb,
        chargedByUsd,
        feePayer,
        from,
        gasPrice,
        gasUsed,
        krw,
        status,
        timestamp,
        transactionHash,
        typeInt,
        usd
    ) {
        this.chainId = chainId
        this.chargedByKlay = chargedByKlay
        this.chargedByKrw = chargedByKrw
        this.chargedByPeb = chargedByPeb
        this.chargedByUsd = chargedByUsd
        this.feePayer = feePayer
        this.from = from
        this.gasPrice = gasPrice
        this.gasUsed = gasUsed
        this.krw = krw
        this.status = status
        this.timestamp = timestamp
        this.transactionHash = transactionHash
        this.typeInt = typeInt
        this.usd = usd
    }

    /**
     * Constructs a <code>FDTransactionWithCurrencyResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {FDTransactionWithCurrencyResult} obj Optional instance to populate.
     * @return {FDTransactionWithCurrencyResult} The populated <code>FDTransactionWithCurrencyResult</code> instance.
     * @memberof FDTransactionWithCurrencyResult
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FDTransactionWithCurrencyResult()

            if (data.hasOwnProperty('chainId')) {
                obj.chainId = ApiClient.convertToType(data.chainId, 'Number')
            }
            if (data.hasOwnProperty('chargedByKlay')) {
                obj.chargedByKlay = ApiClient.convertToType(data.chargedByKlay, 'String')
            }
            if (data.hasOwnProperty('chargedByKrw')) {
                obj.chargedByKrw = ApiClient.convertToType(data.chargedByKrw, 'String')
            }
            if (data.hasOwnProperty('chargedByPeb')) {
                obj.chargedByPeb = ApiClient.convertToType(data.chargedByPeb, 'String')
            }
            if (data.hasOwnProperty('chargedByUsd')) {
                obj.chargedByUsd = ApiClient.convertToType(data.chargedByUsd, 'String')
            }
            if (data.hasOwnProperty('feePayer')) {
                obj.feePayer = ApiClient.convertToType(data.feePayer, 'String')
            }
            if (data.hasOwnProperty('from')) {
                obj.from = ApiClient.convertToType(data.from, 'String')
            }
            if (data.hasOwnProperty('gasPrice')) {
                obj.gasPrice = ApiClient.convertToType(data.gasPrice, 'String')
            }
            if (data.hasOwnProperty('gasUsed')) {
                obj.gasUsed = ApiClient.convertToType(data.gasUsed, 'String')
            }
            if (data.hasOwnProperty('krw')) {
                obj.krw = ApiClient.convertToType(data.krw, 'Number')
            }
            if (data.hasOwnProperty('status')) {
                obj.status = ApiClient.convertToType(data.status, 'String')
            }
            if (data.hasOwnProperty('timestamp')) {
                obj.timestamp = ApiClient.convertToType(data.timestamp, 'Number')
            }
            if (data.hasOwnProperty('transactionHash')) {
                obj.transactionHash = ApiClient.convertToType(data.transactionHash, 'String')
            }
            if (data.hasOwnProperty('typeInt')) {
                obj.typeInt = ApiClient.convertToType(data.typeInt, 'Number')
            }
            if (data.hasOwnProperty('usd')) {
                obj.usd = ApiClient.convertToType(data.usd, 'Number')
            }
            if (data.hasOwnProperty('to')) {
                obj.to = ApiClient.convertToType(data.to, 'String')
            }
            if (data.hasOwnProperty('feeRatio')) {
                obj.feeRatio = ApiClient.convertToType(data.feeRatio, 'String')
            }
        }
        return obj
    }
}

/**
 * @type {Number}
 * @memberof FDTransactionWithCurrencyResult
 */
FDTransactionWithCurrencyResult.prototype.chainId = undefined
/**
 * Fee delegation cost in KLAY
 * @type {String}
 * @memberof FDTransactionWithCurrencyResult
 */
FDTransactionWithCurrencyResult.prototype.chargedByKlay = undefined
/**
 * Fee delegation cost in KRW
 * @type {String}
 * @memberof FDTransactionWithCurrencyResult
 */
FDTransactionWithCurrencyResult.prototype.chargedByKrw = undefined
/**
 * Fee delegation cost in Peb
 * @type {String}
 * @memberof FDTransactionWithCurrencyResult
 */
FDTransactionWithCurrencyResult.prototype.chargedByPeb = undefined
/**
 * Fee delegation cost in USD
 * @type {String}
 * @memberof FDTransactionWithCurrencyResult
 */
FDTransactionWithCurrencyResult.prototype.chargedByUsd = undefined
/**
 * FeePayer's Klaytn account address
 * @type {String}
 * @memberof FDTransactionWithCurrencyResult
 */
FDTransactionWithCurrencyResult.prototype.feePayer = undefined
/**
 * Transaction sender's Klaytn account address
 * @type {String}
 * @memberof FDTransactionWithCurrencyResult
 */
FDTransactionWithCurrencyResult.prototype.from = undefined
/**
 * The cost of gas used for sending the transaction
 * @type {String}
 * @memberof FDTransactionWithCurrencyResult
 */
FDTransactionWithCurrencyResult.prototype.gasPrice = undefined
/**
 * Amount of gas used for sending the transaction
 * @type {String}
 * @memberof FDTransactionWithCurrencyResult
 */
FDTransactionWithCurrencyResult.prototype.gasUsed = undefined
/**
 * KLAY/KRW rate at the time of sending the transaction (previous close)
 * @type {Number}
 * @memberof FDTransactionWithCurrencyResult
 */
FDTransactionWithCurrencyResult.prototype.krw = undefined
/**
 * Transaction status
 * @type {String}
 * @memberof FDTransactionWithCurrencyResult
 */
FDTransactionWithCurrencyResult.prototype.status = undefined
/**
 * Timestamp of when the transaction was processed (in sec.)
 * @type {Number}
 * @memberof FDTransactionWithCurrencyResult
 */
FDTransactionWithCurrencyResult.prototype.timestamp = undefined
/**
 * Transaction hash
 * @type {String}
 * @memberof FDTransactionWithCurrencyResult
 */
FDTransactionWithCurrencyResult.prototype.transactionHash = undefined
/**
 * The number to indicate the transaction type. For more details on transaction types, refer to [link](https://docs.klaytn.com/klaytn/design/transactions).
 * @type {Number}
 * @memberof FDTransactionWithCurrencyResult
 */
FDTransactionWithCurrencyResult.prototype.typeInt = undefined
/**
 * KLAY/USD rate at the time of sending the transaction (previous close)
 * @type {Number}
 * @memberof FDTransactionWithCurrencyResult
 */
FDTransactionWithCurrencyResult.prototype.usd = undefined
/**
 * KLAY recipient's Klaytn account address or contract address
 * @type {String}
 * @memberof FDTransactionWithCurrencyResult
 */
FDTransactionWithCurrencyResult.prototype.to = undefined
/**
 * The ratio of fee paid by FeePayer from the total transaction fee. If the FeePayer pays all, this field can be left blank.
 * @type {String}
 * @memberof FDTransactionWithCurrencyResult
 */
FDTransactionWithCurrencyResult.prototype.feeRatio = undefined

module.exports = FDTransactionWithCurrencyResult
