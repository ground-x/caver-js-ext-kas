/**
 * Wallet API
 * # Introduction Wallet API is an API for creating and managing Klaytn accounts as well as sending transactions. If you create your Klaytn account using Wallet API, you don't have to manage your private key yourself. Wallet API provides a wallet for safe storage of your Klaytn account private keys that you would need to use BApps. For more details on how to use Wallet API, please refer to this [tutorial](https://docs.klaytnapi.com/v/en/tutorial).  Wallet API can be divided into the Account part, which creates and manages Klaytn accounts, and the Transaction part, which sends different kinds of transactions.  Wallet API creates, deletes and monitors Klaytn accounts and updates the accounts to multisig, and manages all private keys for all accounts registered on KAS.  Wallet API can also create transaction to send it to Klaytn. These include transactions sent from multisig accounts. In case of muiltisig accounts, a transaction will automatically be sent to Klaytn once \\(Threshold\\) is met. For more detail, please refer to this [tutorial](https://docs.klaytnapi.com/v/en/tutorial).  There are mainly two types of transactions: basic transactions and fee delegation transactions. Fee delegation transactions include Global Fee Delegation transaction and user fee deletation transaction. With the Global Fee Delegation transaction scheme, the transaction fee will initially be paid by GroundX and then be charged to you at a later date. With the User Fee Delegation transaction scheme, you create an account that pays the transaction fees on behalf of the users when a transaction.  The functionalities and limits of Wallet API are shown below:  | Version | Item | Description | | :--- | :--- | :--- | | 2.0 | Limits | Supports Cypress(Mainnet), Baobab(Testnet) \\ Doesn't support (Service Chain \\) | |  |  | Doesn't support account management for external custodial keys | |  |  | Doesn't support multisig for RLP encoded transactions | |  | Account management | Create, retrieve and delete account | |  |  | Multisig account update | |  | Managing transaction | [Basic](https://ko.docs.klaytn.com/klaytn/design/transactions/basic) creating and sending transaction | |  |  | [FeeDelegatedWithRatio](https://ko.docs.klaytn.com/klaytn/design/transactions/partial-fee-delegation) creating and sending transaction | |  |  | RLP encoded transaction\\([Legacy](https://ko.docs.klaytn.com/klaytn/design/transactions/basic#txtypelegacytransaction), [Basic](https://ko.docs.klaytn.com/klaytn/design/transactions/basic), [FeeDelegatedWithRatio](https://ko.docs.klaytn.com/klaytn/design/transactions/partial-fee-delegation)\\) creating and sending | |  |  | Managing and sending multisig transactions | |  | Administrator | Manage resource pool\\(create, query pool, delete, retrieve account \\) |
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

const ApiClient = require('../../ApiClient')
const ErrorResponse = require('../model/ErrorResponse')
const MultisigTransactionStatus = require('../model/MultisigTransactionStatus')
const MultisigTransactions = require('../model/MultisigTransactions')
const SignPendingTransactionBySigRequest = require('../model/SignPendingTransactionBySigRequest')

/**
 * MultisigTx service.
 * @class MultisigTxApi
 * @version 1.0
 */
class MultisigTxApi {
    /**
     * Constructs a new MultisigTxApi.
     * @alias MultisigTxApi
     * @class
     * @param {ApiClient} [apiClient] Optional API client implementation to use,
     * default to {@link ApiClient#instance} if unspecified.
     */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance
    }

    /**
     * Callback function to receive the result of the retrieveMultisigTransactions operation.
     * @callback MultisigTxApi~retrieveMultisigTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {MultisigTransactions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve pending transactions
     * Retrieve pending transactions that had been send from a multisig account.&lt;p&gt;&lt;/p&gt;  ##### Size&lt;p&gt;&lt;/p&gt;  * The query parameter &#x60;size&#x60; is optional. (Min &#x3D; 1, Max &#x3D; 1000, Default &#x3D; 100)&lt;br&gt; * Returns an error when given a negative number&lt;br&gt; * Uses default value (&#x60;size&#x3D;100&#x60;) when &#x60;size&#x3D;0&#x60;&lt;br&gt; * Uses the maximum value (&#x60;size&#x3D;1000&#x60;) when given a value higher than the maximum value.&lt;br&gt;
     * @param {Object} opts Optional parameters
     * @param {MultisigTxApi~retrieveMultisigTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link MultisigTransactions}
     */
    retrieveMultisigTransactions(xChainId, address, opts, callback) {
        opts = opts || {}
        const postBody = null

        const pathParams = {
            address: address,
        }
        const queryParams = {
            size: opts.size,
            cursor: opts.cursor,
            'to-timestamp': opts.toTimestamp,
            'from-timestamp': opts.fromTimestamp,
        }
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = []
        const accepts = ['application/json']
        const returnType = MultisigTransactions

        return this.apiClient.callApi(
            '/v2/multisig/account/{address}/tx',
            'GET',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the signPendingTransaction operation.
     * @callback MultisigTxApi~signPendingTransactionCallback
     * @param {String} error Error message, if any.
     * @param {MultisigTransactionStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sign pending transaction
     * A valid signer Signs a pending transaction.
     * @param {MultisigTxApi~signPendingTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link MultisigTransactionStatus}
     */
    signPendingTransaction(xChainId, address, transactionId, callback) {
        const postBody = null

        const pathParams = {
            address: address,
            'transaction-id': transactionId,
        }
        const queryParams = {}
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = []
        const accepts = ['application/json']
        const returnType = MultisigTransactionStatus

        return this.apiClient.callApi(
            '/v2/multisig/account/{address}/tx/{transaction-id}/sign',
            'POST',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the signPendingTransactionBySig operation.
     * @callback MultisigTxApi~signPendingTransactionBySigCallback
     * @param {String} error Error message, if any.
     * @param {MultisigTransactionStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sign transaction with a signature value
     * Add a signature to a pending transaction with a signature value. You can obtain a signature value externally from an account that you don&#x27;t own, and use it to add to transactions.
     * @param {Object} opts Optional parameters
     * @param {MultisigTxApi~signPendingTransactionBySigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link MultisigTransactionStatus}
     */
    signPendingTransactionBySig(xChainId, transactionId, opts, callback) {
        opts = opts || {}
        const postBody = opts.body

        const pathParams = {
            'transaction-id': transactionId,
        }
        const queryParams = {}
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = ['application/json']
        const accepts = ['application/json']
        const returnType = MultisigTransactionStatus

        return this.apiClient.callApi(
            '/v2/multisig/tx/{transaction-id}/sign',
            'POST',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
}
module.exports = MultisigTxApi
