/*
 * Wallet API
 * # Introduction Wallet API는 클레이튼 계정을 만들어 관리하고 트랜잭션을 전송하는 API입니다. Wallet API로 Klaytn 계정을 만들면 여러분은 개인키를 따로 관리할 필요가 없습니다. Wallet API는 BApp을 위해 Klaytn 계정 개인키를 안전하게 보관하는 지갑을 제공합니다. Wallet API 사용에 관한 자세한 내용은 [튜토리얼](https://docs.klaytnapi.com/v/ko/tutorial)을 확인하십시오.  Wallet API는 크게 Klaytn 계정을 만들고 관리하는 Account 파트와 여러 종류의 트랜잭션을 전송하는 Transaction 파트로 나뉩니다.  Wallet API는 Klaytn 계정을 생성, 삭제, 모니터링하고 계정을 다중 서명 계정(Multisig 계정)으로 업데이트하며 KAS에 등록된 모든 계정의 개인키를 관리합니다.  또 Wallet API는 트랜잭션을 만들어 Klaytn에 전송합니다. 이 트랜잭션에는 다중 서명 계정이 보내는 트랜잭션도 포함됩니다. 다중 서명 시 임계값\\(Threshold\\)을 만족하면 트랜잭션은 Klaytn에 자동으로 전송됩니다. 다중 서명에 관한 자세한 내용은 [다음](https://docs.klaytnapi.com/v/ko/tutorial)을 확인하십시오.  트랜잭션은 크게 기본 트랜잭션과 수수료 대납 트랜잭션으로 나뉩니다. 수수료 대납 트랜잭션은 크게 글로벌 수수료 대납 트랜잭션과 사용자 수수료 대납 트랜잭션으로 나뉩니다. 글로벌 수수료 대납 트랜잭션은 Ground X의 KAS 계정에서 트랜잭션 수수료를 일단 대납해주고 나중에 여러분에게 이 수수료를 청구하는 방식입니다. 사용자 수수료 대납 트랜잭션은 여러분이 직접 트랜잭션 수수료를 대납하는 계정을 만들고, 트랜잭션을 보낼 때 이 대납 계정이 트랜잭션 수수료를 납부하도록 하는 방식입니다.  Wallet API는 아래와 같은 기능 및 제약사항을 갖고 있습니다.  | Version | Item | Description | | :--- | :--- | :--- | | 2.0 | 제약사항 | Cypress(Mainnet), Baobab(Testnet) 지원\\(Service Chain 미지원\\) | |  |  | 외부 관리키에 대한 계정 관리 미지원 | |  |  | RLP 인코딩된 트랜잭션의 다중 서명 미지원 | |  | 계정관리 | 계정 생성, 조회, 삭제 | |  |  | 다중 서명 계정 업데이트 | |  | 트랜잭션 관리 | [Basic](https://ko.docs.klaytn.com/klaytn/design/transactions/basic) 트랜잭션 생성 및 전송 | |  |  | [FeeDelegatedWithRatio](https://ko.docs.klaytn.com/klaytn/design/transactions/partial-fee-delegation) 트랜잭션 생성 및 전송 | |  |  | RLP 인코딩된 트랜잭션\\([Legacy](https://ko.docs.klaytn.com/klaytn/design/transactions/basic#txtypelegacytransaction), [Basic](https://ko.docs.klaytn.com/klaytn/design/transactions/basic), [FeeDelegatedWithRatio](https://ko.docs.klaytn.com/klaytn/design/transactions/partial-fee-delegation)\\) 생성 및 전송 | |  |  | 다중 서명 트랜잭션 관리 및 전송 | |  | 관리자 | 리소스 풀 관리\\(생성, 풀 조회, 삭제, 계정 조회\\) |    # Error Codes  ## 400: Bad Request   | Code | Messages |   | --- | --- |   | 1061010 | data don't exist 1061510 | account has been already deleted or disabled 1061511 | account has been already deleted or enabled 1061512 | account is invalid to sign the transaction; 0xc9bFDDabf2c38396b097C8faBE9151955413995D</br>account is invalid to sign the transaction; 0x35Cc4921B17Dfa67a58B93c9F8918f823e58b77e 1061515 | the requested account must be a legacy account; if the account is multisig account, use `PUT /v2/tx/{fd|fd-user}/account` API for multisig transaction and /v2/multisig/_**_/_** APIs 1061607 | it has to start with '0x' and allows [0-9a-fA-F]; input</br>it has to start with '0x' and allows [0-9a-fA-F]; transaction-id 1061608 | cannot be empty or zero value; to</br>cannot be empty or zero value; input 1061609 | it just allow Klaytn address form; to 1061903 | failed to decode account keys 1061905 | failed to get feepayer 1061912 | rlp value and request value are not same; feeRatio</br>rlp value and request value are not same; feePayer 1061914 | already submitted transaction. Confirm transaction hash; 0xb9612ec6ec39bfd3f2841daa7ab062fc94cf33f23503606c979b2f81e50b2cb1 1061917 | AccountKeyLegacy type is not supported in AccountKeyRoleBased type 1061918 | it just allow (Partial)FeeDelegation transaction type 1061919 | PartialFeeDelegation transaction must set fee ratio to non-zero value 1061920 | FeeDelegation transaction cannot set fee ratio, use PartialFeeDelegation transaction type 1061921 | it just allow Basic transaction type 1065000 | failed to retrieve a transaction from klaytn node 1065001 | failed to send a raw transaction to klaytn node; -32000::insufficient funds of the sender for value </br>failed to send a raw transaction to klaytn node; -32000::not a program account (e.g., an account having code and storage)</br>failed to send a raw transaction to klaytn node; -32000::nonce too low</br>failed to send a raw transaction to klaytn node; -32000::insufficient funds of the fee payer for gas * price 1065100 | failed to get an account from AMS</br>failed to get an account from AMS; account key corrupted. can not use this account 1065102 | account key corrupted. can not use this account 1616 | feeration must be between 1 and 99; feeRatio 1918 | it just allow (Partial)FeeDelegation transaction type |
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

;(function(root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define([
            '../../ApiClient',
            '../model/Account',
            '../model/AccountStatus',
            '../model/AccountSummary',
            '../model/Accounts',
            '../model/AccountsByPubkey',
            '../model/ErrorResponse',
            '../model/MultisigAccount',
            '../model/MultisigAccountUpdateRequest',
            '../model/Signature',
        ], factory)
    } else if (typeof module === 'object' && module.exports) {
        // CommonJS-like environments that support module.exports, like Node.
        module.exports = factory(
            require('../../ApiClient'),
            require('../model/Account'),
            require('../model/AccountStatus'),
            require('../model/AccountSummary'),
            require('../model/Accounts'),
            require('../model/AccountsByPubkey'),
            require('../model/ErrorResponse'),
            require('../model/MultisigAccount'),
            require('../model/MultisigAccountUpdateRequest'),
            require('../model/Signature')
        )
    } else {
        // Browser globals (root is window)
        if (!root.WalletApi) {
            root.WalletApi = {}
        }
        root.WalletApi.AccountApi = factory(
            root.WalletApi.ApiClient,
            root.WalletApi.Account,
            root.WalletApi.AccountStatus,
            root.WalletApi.AccountSummary,
            root.WalletApi.Accounts,
            root.WalletApi.AccountsByPubkey,
            root.WalletApi.ErrorResponse,
            root.WalletApi.MultisigAccount,
            root.WalletApi.MultisigAccountUpdateRequest,
            root.WalletApi.Signature
        )
    }
})(this, function(
    ApiClient,
    Account,
    AccountStatus,
    AccountSummary,
    Accounts,
    AccountsByPubkey,
    ErrorResponse,
    MultisigAccount,
    MultisigAccountUpdateRequest,
    Signature
) {
    /**
     * Account service.
     * @class AccountApi
     * @version 1.0
     */

    /**
     * Constructs a new AccountApi.
     * @alias AccountApi
     * @class
     * @param {ApiClient} [apiClient] Optional API client implementation to use,
     * default to {@link ApiClient#instance} if unspecified.
     */
    const exports = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance

        /**
         * Callback function to receive the result of the activateAccount operation.
         * @callback AccountApi~activateAccountCallback
         * @param {String} error Error message, if any.
         * @param {AccountSummary} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * ActivateAccount
         * 비활성화된 클레이튼 계정을 다시 활성화합니다.
         * @param {String} xChainId Klaytn 체인 네트워크 ID (1001 or 8217)
         * @param {String} address Klaytn 계정 주소
         * @param {AccountApi~activateAccountCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link AccountSummary}
         */
        this.activateAccount = function(xChainId, address, callback) {
            const postBody = null

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling activateAccount")
            }

            // verify the required parameter 'address' is set
            if (address === undefined || address === null) {
                throw new Error("Missing the required parameter 'address' when calling activateAccount")
            }

            const pathParams = {
                address: address,
            }
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = AccountSummary

            return this.apiClient.callApi(
                '/v2/account/{address}/enable',
                'PUT',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the createAccount operation.
         * @callback AccountApi~createAccountCallback
         * @param {String} error Error message, if any.
         * @param {Account} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * CreateAccount
         * 클레이튼 계정을 생성합니다. 임의의 클레이튼 계정 주소와 개인키/공개키 쌍을 생성하며 public key와 private key ID를 반환합니다.
         * @param {String} xChainId Klaytn 체인 네트워크 ID (1001 or 8217)
         * @param {AccountApi~createAccountCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link Account}
         */
        this.createAccount = function(xChainId, callback) {
            const postBody = null

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling createAccount")
            }

            const pathParams = {}
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = Account

            return this.apiClient.callApi(
                '/v2/account',
                'POST',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the deactivateAccount operation.
         * @callback AccountApi~deactivateAccountCallback
         * @param {String} error Error message, if any.
         * @param {AccountSummary} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * DeactivateAccount
         * 해당 클레이튼 계정을 비활성화합니다. 계정을 비활성화하면 해당 계정이 조회되지 않습니다.
         * @param {String} xChainId Klaytn 체인 네트워크 ID (1001 or 8217)
         * @param {String} address Klaytn 계정 주소
         * @param {AccountApi~deactivateAccountCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link AccountSummary}
         */
        this.deactivateAccount = function(xChainId, address, callback) {
            const postBody = null

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling deactivateAccount")
            }

            // verify the required parameter 'address' is set
            if (address === undefined || address === null) {
                throw new Error("Missing the required parameter 'address' when calling deactivateAccount")
            }

            const pathParams = {
                address: address,
            }
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = AccountSummary

            return this.apiClient.callApi(
                '/v2/account/{address}/disable',
                'PUT',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the deleteAccount operation.
         * @callback AccountApi~deleteAccountCallback
         * @param {String} error Error message, if any.
         * @param {AccountStatus} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * DeleteAccount
         * 해당 클레이튼 계정을 삭제합니다.
         * @param {String} xChainId Klaytn 체인 네트워크 ID (1001 or 8217)
         * @param {String} address Klaytn 계정 주소
         * @param {AccountApi~deleteAccountCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link AccountStatus}
         */
        this.deleteAccount = function(xChainId, address, callback) {
            const postBody = null

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling deleteAccount")
            }

            // verify the required parameter 'address' is set
            if (address === undefined || address === null) {
                throw new Error("Missing the required parameter 'address' when calling deleteAccount")
            }

            const pathParams = {
                address: address,
            }
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = AccountStatus

            return this.apiClient.callApi(
                '/v2/account/{address}',
                'DELETE',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the multisigAccountUpdate operation.
         * @callback AccountApi~multisigAccountUpdateCallback
         * @param {String} error Error message, if any.
         * @param {MultisigAccount} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * MultisigAccountUpdate
         * 해당 클레이튼 계정을 Multisig 계정으로 업데이트합니다. 계정 업데이트 트랜잭션을 실행할 때 트랜잭션 수수료를 지불해야 하므로 적당한 잔액이 있어야 합니다.
         * @param {String} xChainId Klaytn 체인 네트워크 ID (1001 or 8217)
         * @param {String} address Klaytn 계정 주소
         * @param {Object} opts Optional parameters
         * @param {MultisigAccountUpdateRequest} opts.body
         * @param {AccountApi~multisigAccountUpdateCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link MultisigAccount}
         */
        this.multisigAccountUpdate = function(xChainId, address, opts, callback) {
            opts = opts || {}
            const postBody = opts.body

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling multisigAccountUpdate")
            }

            // verify the required parameter 'address' is set
            if (address === undefined || address === null) {
                throw new Error("Missing the required parameter 'address' when calling multisigAccountUpdate")
            }

            const pathParams = {
                address: address,
            }
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = MultisigAccount

            return this.apiClient.callApi(
                '/v2/account/{address}/multisig',
                'PUT',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the retrieveAccount operation.
         * @callback AccountApi~retrieveAccountCallback
         * @param {String} error Error message, if any.
         * @param {Account} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * RetrieveAccount
         * 해당 클레이튼 계정을 조회합니다.
         * @param {String} xChainId Klaytn 체인 네트워크 ID (1001 or 8217)
         * @param {String} address Klaytn 계정 주소
         * @param {AccountApi~retrieveAccountCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link Account}
         */
        this.retrieveAccount = function(xChainId, address, callback) {
            const postBody = null

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling retrieveAccount")
            }

            // verify the required parameter 'address' is set
            if (address === undefined || address === null) {
                throw new Error("Missing the required parameter 'address' when calling retrieveAccount")
            }

            const pathParams = {
                address: address,
            }
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = Account

            return this.apiClient.callApi(
                '/v2/account/{address}',
                'GET',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the retrieveAccounts operation.
         * @callback AccountApi~retrieveAccountsCallback
         * @param {String} error Error message, if any.
         * @param {Accounts} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * RetrieveAccounts
         * 이전에 생성한 클레이튼 계정 목록을 조회합니다.
         * @param {String} xChainId Klaytn 체인 네트워크 ID (1001 or 8217)
         * @param {Object} opts Optional parameters
         * @param {Number} opts.size 검색할 계정의 최대 사이즈 (default to 100)
         * @param {String} opts.cursor 마지막으로 검색된 커서의 정보
         * @param {Number} opts.toTimestamp 검색하고자 하는 마지막 시간의 타임스탬프 (초단위)
         * @param {Number} opts.fromTimestamp 검색하고자 하는 처음 시간의 타임스탬프 (초단위)
         * @param {AccountApi~retrieveAccountsCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link Accounts}
         */
        this.retrieveAccounts = function(xChainId, opts, callback) {
            opts = opts || {}
            const postBody = null

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling retrieveAccounts")
            }

            const pathParams = {}
            const queryParams = {
                size: opts.size,
                cursor: opts.cursor,
                'to-timestamp': opts.toTimestamp,
                'from-timestamp': opts.fromTimestamp,
            }
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = Accounts

            return this.apiClient.callApi(
                '/v2/account',
                'GET',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the retrieveAccountsByPubkey operation.
         * @callback AccountApi~retrieveAccountsByPubkeyCallback
         * @param {String} error Error message, if any.
         * @param {AccountsByPubkey} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * RetrieveAccountsByPubkey
         * 해당 공개키를 가진 클레이튼 계정 목록을 조회합니다.
         * @param {String} xChainId Klaytn 체인 네트워크 ID (1001 or 8217)
         * @param {String} publicKey Klaytn 공개키
         * @param {AccountApi~retrieveAccountsByPubkeyCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link AccountsByPubkey}
         */
        this.retrieveAccountsByPubkey = function(xChainId, publicKey, callback) {
            const postBody = null

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling retrieveAccountsByPubkey")
            }

            // verify the required parameter 'publicKey' is set
            if (publicKey === undefined || publicKey === null) {
                throw new Error("Missing the required parameter 'publicKey' when calling retrieveAccountsByPubkey")
            }

            const pathParams = {
                'public-key': publicKey,
            }
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = AccountsByPubkey

            return this.apiClient.callApi(
                '/v2/pubkey/{public-key}/account',
                'GET',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the signTransactionIDResponse operation.
         * @callback AccountApi~signTransactionIDResponseCallback
         * @param {String} error Error message, if any.
         * @param {Signature} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * SignTransactionIDResponse
         * 해당 클레이튼 계정으로 이 Transaction ID를 가진 트랜잭션에 서명합니다.
         * @param {String} xChainId Klaytn 체인 네트워크 ID (1001 or 8217)
         * @param {String} address Klaytn 계정 주소
         * @param {String} transactionId 서명하려는 트랜잭션의 ID
         * @param {AccountApi~signTransactionIDResponseCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link Signature}
         */
        this.signTransactionIDResponse = function(xChainId, address, transactionId, callback) {
            const postBody = null

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling signTransactionIDResponse")
            }

            // verify the required parameter 'address' is set
            if (address === undefined || address === null) {
                throw new Error("Missing the required parameter 'address' when calling signTransactionIDResponse")
            }

            // verify the required parameter 'transactionId' is set
            if (transactionId === undefined || transactionId === null) {
                throw new Error("Missing the required parameter 'transactionId' when calling signTransactionIDResponse")
            }

            const pathParams = {
                address: address,
                'transaction-id': transactionId,
            }
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = Signature

            return this.apiClient.callApi(
                '/v2/account/{address}/tx/{transaction-id}/sign',
                'POST',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }
    }

    return exports
})
