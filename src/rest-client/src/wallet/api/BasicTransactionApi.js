/*
 * Wallet API
 * # Introduction Wallet API는 클레이튼 계정을 만들어 관리하고 트랜잭션을 전송하는 API입니다. Wallet API로 Klaytn 계정을 만들면 여러분은 개인키를 따로 관리할 필요가 없습니다. Wallet API는 BApp을 위해 Klaytn 계정 개인키를 안전하게 보관하는 지갑을 제공합니다. Wallet API 사용에 관한 자세한 내용은 [튜토리얼](https://docs.klaytnapi.com/v/ko/tutorial)을 확인하십시오.  Wallet API는 크게 Klaytn 계정을 만들고 관리하는 Account 파트와 여러 종류의 트랜잭션을 전송하는 Transaction 파트로 나뉩니다.  Wallet API는 Klaytn 계정을 생성, 삭제, 모니터링하고 계정을 다중 서명 계정(Multisig 계정)으로 업데이트하며 KAS에 등록된 모든 계정의 개인키를 관리합니다.  또 Wallet API는 트랜잭션을 만들어 Klaytn에 전송합니다. 이 트랜잭션에는 다중 서명 계정이 보내는 트랜잭션도 포함됩니다. 다중 서명 시 임계값\\(Threshold\\)을 만족하면 트랜잭션은 Klaytn에 자동으로 전송됩니다. 다중 서명에 관한 자세한 내용은 [다음](https://docs.klaytnapi.com/v/ko/tutorial)을 확인하십시오.  트랜잭션은 크게 기본 트랜잭션과 수수료 대납 트랜잭션으로 나뉩니다. 수수료 대납 트랜잭션은 크게 글로벌 수수료 대납 트랜잭션과 사용자 수수료 대납 트랜잭션으로 나뉩니다. 글로벌 수수료 대납 트랜잭션은 Ground X의 KAS 계정에서 트랜잭션 수수료를 일단 대납해주고 나중에 여러분에게 이 수수료를 청구하는 방식입니다. 사용자 수수료 대납 트랜잭션은 여러분이 직접 트랜잭션 수수료를 대납하는 계정을 만들고, 트랜잭션을 보낼 때 이 대납 계정이 트랜잭션 수수료를 납부하도록 하는 방식입니다.  Wallet API는 아래와 같은 기능 및 제약사항을 갖고 있습니다.  | Version | Item | Description | | :--- | :--- | :--- | | 2.0 | 제약사항 | Cypress(Mainnet), Baobab(Testnet) 지원\\(Service Chain 미지원\\) | |  |  | 외부 관리키에 대한 계정 관리 미지원 | |  |  | RLP 인코딩된 트랜잭션의 다중 서명 미지원 | |  | 계정관리 | 계정 생성, 조회, 삭제 | |  |  | 다중 서명 계정 업데이트 | |  | 트랜잭션 관리 | [Basic](https://ko.docs.klaytn.com/klaytn/design/transactions/basic) 트랜잭션 생성 및 전송 | |  |  | [FeeDelegatedWithRatio](https://ko.docs.klaytn.com/klaytn/design/transactions/partial-fee-delegation) 트랜잭션 생성 및 전송 | |  |  | RLP 인코딩된 트랜잭션\\([Legacy](https://ko.docs.klaytn.com/klaytn/design/transactions/basic#txtypelegacytransaction), [Basic](https://ko.docs.klaytn.com/klaytn/design/transactions/basic), [FeeDelegatedWithRatio](https://ko.docs.klaytn.com/klaytn/design/transactions/partial-fee-delegation)\\) 생성 및 전송 | |  |  | 다중 서명 트랜잭션 관리 및 전송 | |  | 관리자 | 리소스 풀 관리\\(생성, 풀 조회, 삭제, 계정 조회\\) |    # Error Codes  ## 400: Bad Request   | Code | Messages |   | --- | --- |   | 1061010 | data don't exist 1061510 | account has been already deleted or disabled 1061511 | account has been already deleted or enabled 1061512 | account is invalid to sign the transaction; 0xc9bFDDabf2c38396b097C8faBE9151955413995D</br>account is invalid to sign the transaction; 0x35Cc4921B17Dfa67a58B93c9F8918f823e58b77e 1061515 | the requested account must be a legacy account; if the account is multisig account, use `PUT /v2/tx/{fd|fd-user}/account` API for multisig transaction and /v2/multisig/_**_/_** APIs 1061607 | it has to start with '0x' and allows [0-9a-fA-F]; input</br>it has to start with '0x' and allows [0-9a-fA-F]; transaction-id 1061608 | cannot be empty or zero value; to</br>cannot be empty or zero value; input 1061609 | it just allow Klaytn address form; to 1061903 | failed to decode account keys 1061905 | failed to get feepayer 1061912 | rlp value and request value are not same; feeRatio</br>rlp value and request value are not same; feePayer 1061914 | already submitted transaction. Confirm transaction hash; 0xb9612ec6ec39bfd3f2841daa7ab062fc94cf33f23503606c979b2f81e50b2cb1 1061917 | AccountKeyLegacy type is not supported in AccountKeyRoleBased type 1061918 | it just allow (Partial)FeeDelegation transaction type 1061919 | PartialFeeDelegation transaction must set fee ratio to non-zero value 1061920 | FeeDelegation transaction cannot set fee ratio, use PartialFeeDelegation transaction type 1061921 | it just allow Basic transaction type 1065000 | failed to retrieve a transaction from klaytn node 1065001 | failed to send a raw transaction to klaytn node; -32000::insufficient funds of the sender for value </br>failed to send a raw transaction to klaytn node; -32000::not a program account (e.g., an account having code and storage)</br>failed to send a raw transaction to klaytn node; -32000::nonce too low</br>failed to send a raw transaction to klaytn node; -32000::insufficient funds of the fee payer for gas * price 1065100 | failed to get an account from AMS</br>failed to get an account from AMS; account key corrupted. can not use this account 1065102 | account key corrupted. can not use this account 1616 | feeration must be between 1 and 99; feeRatio 1918 | it just allow (Partial)FeeDelegation transaction type |
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

;(function(root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define([
            '../../ApiClient',
            '../model/AccountUpdateTransactionRequest',
            '../model/AnchorTransactionRequest',
            '../model/CancelTransactionRequest',
            '../model/ContractDeployTransactionRequest',
            '../model/ContractExecutionTransactionRequest',
            '../model/ErrorResponse',
            '../model/LegacyTransactionRequest',
            '../model/ProcessRLPRequest',
            '../model/TransactionReceipt',
            '../model/TransactionResult',
            '../model/ValueTransferTransactionRequest',
        ], factory)
    } else if (typeof module === 'object' && module.exports) {
        // CommonJS-like environments that support module.exports, like Node.
        module.exports = factory(
            require('../../ApiClient'),
            require('../model/AccountUpdateTransactionRequest'),
            require('../model/AnchorTransactionRequest'),
            require('../model/CancelTransactionRequest'),
            require('../model/ContractDeployTransactionRequest'),
            require('../model/ContractExecutionTransactionRequest'),
            require('../model/ErrorResponse'),
            require('../model/LegacyTransactionRequest'),
            require('../model/ProcessRLPRequest'),
            require('../model/TransactionReceipt'),
            require('../model/TransactionResult'),
            require('../model/ValueTransferTransactionRequest')
        )
    } else {
        // Browser globals (root is window)
        if (!root.WalletApi) {
            root.WalletApi = {}
        }
        root.WalletApi.BasicTransactionApi = factory(
            root.WalletApi.ApiClient,
            root.WalletApi.AccountUpdateTransactionRequest,
            root.WalletApi.AnchorTransactionRequest,
            root.WalletApi.CancelTransactionRequest,
            root.WalletApi.ContractDeployTransactionRequest,
            root.WalletApi.ContractExecutionTransactionRequest,
            root.WalletApi.ErrorResponse,
            root.WalletApi.LegacyTransactionRequest,
            root.WalletApi.ProcessRLPRequest,
            root.WalletApi.TransactionReceipt,
            root.WalletApi.TransactionResult,
            root.WalletApi.ValueTransferTransactionRequest
        )
    }
})(this, function(
    ApiClient,
    AccountUpdateTransactionRequest,
    AnchorTransactionRequest,
    CancelTransactionRequest,
    ContractDeployTransactionRequest,
    ContractExecutionTransactionRequest,
    ErrorResponse,
    LegacyTransactionRequest,
    ProcessRLPRequest,
    TransactionReceipt,
    TransactionResult,
    ValueTransferTransactionRequest
) {
    /**
     * BasicTransaction service.
     * @class BasicTransactionApi
     * @version 1.0
     */

    /**
     * Constructs a new BasicTransactionApi.
     * @alias BasicTransactionApi
     * @class
     * @param {ApiClient} [apiClient] Optional API client implementation to use,
     * default to {@link ApiClient#instance} if unspecified.
     */
    const exports = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance

        /**
         * Callback function to receive the result of the accountUpdateTransaction operation.
         * @callback BasicTransactionApi~accountUpdateTransactionCallback
         * @param {String} error Error message, if any.
         * @param {TransactionResult} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * AccountUpdateTransaction
         * 클레이튼 계정 키를 업데이트하는 트랜잭션을 생성합니다. 클레이튼 계정 키 종류는 [다음](https://ko.docs.klaytn.com/klaytn/design/accounts)을 확인하십시오.  해당 계정을 Legacy 키 타입(1)으로 업데이트하면, 계정은 Enabled 되면 사용가능한 상태가 됩니다. 해당 계정을 Public 키 타입(2)으로 업데이트하면, 계정은 월렛내에서 사용할수 없게됩니다. 다시 복구하기 위해서는 Global 수수료 대납 RLP API 를 사용하거나, 외부에서 legacy 키로 업데이트한 후에 계정은 Enable 해주세요. 해당 계정의 키를 Fail키 타입(3)으로 업데이트하면, 계정은 자동으로 disable 됩니다.
         * @param {String} xChainId Klaytn 체인 네트워크 ID (1001 or 8217)
         * @param {Object} opts Optional parameters
         * @param {AccountUpdateTransactionRequest} opts.body
         * @param {BasicTransactionApi~accountUpdateTransactionCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link TransactionResult}
         */
        this.accountUpdateTransaction = function(xChainId, opts, callback) {
            opts = opts || {}
            const postBody = opts.body

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling accountUpdateTransaction")
            }

            const pathParams = {}
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = TransactionResult

            return this.apiClient.callApi(
                '/v2/tx/account',
                'PUT',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the anchorTransaction operation.
         * @callback BasicTransactionApi~anchorTransactionCallback
         * @param {String} error Error message, if any.
         * @param {TransactionResult} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * AnchorTransaction
         * 서비스 체인 데이터를 Klaytn 메인 체인에 앵커링하는 트랜잭션을 생성합니다.
         * @param {String} xChainId Klaytn 체인 네트워크 ID (1001 or 8217)
         * @param {Object} opts Optional parameters
         * @param {AnchorTransactionRequest} opts.body
         * @param {BasicTransactionApi~anchorTransactionCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link TransactionResult}
         */
        this.anchorTransaction = function(xChainId, opts, callback) {
            opts = opts || {}
            const postBody = opts.body

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling anchorTransaction")
            }

            const pathParams = {}
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}
            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = TransactionResult

            return this.apiClient.callApi(
                '/v2/tx/anchor',
                'POST',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the cancelTransaction operation.
         * @callback BasicTransactionApi~cancelTransactionCallback
         * @param {String} error Error message, if any.
         * @param {TransactionResult} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * CancelTransaction
         * Klaytn에 전송했으나 보류중인 트랜잭션을 취소시키기 위한 트랜잭션을 생성합니다. 취소를 위해 논스 또는 트랜잭션 해시 둘 중 하나의 값이 꼭 필요합니다.
         * @param {String} xChainId Klaytn 체인 네트워크 ID (1001 or 8217)
         * @param {Object} opts Optional parameters
         * @param {CancelTransactionRequest} opts.body
         * @param {BasicTransactionApi~cancelTransactionCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link TransactionResult}
         */
        this.cancelTransaction = function(xChainId, opts, callback) {
            opts = opts || {}
            const postBody = opts.body

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling cancelTransaction")
            }

            const pathParams = {}
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = TransactionResult

            return this.apiClient.callApi(
                '/v2/tx',
                'DELETE',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the contractDeployTransaction operation.
         * @callback BasicTransactionApi~contractDeployTransactionCallback
         * @param {String} error Error message, if any.
         * @param {TransactionResult} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * ContractDeployTransaction
         * 컨트랙트를 배포하는 트랜잭션을 생성합니다.
         * @param {String} xChainId Klaytn 체인 네트워크 ID (1001 or 8217)
         * @param {Object} opts Optional parameters
         * @param {ContractDeployTransactionRequest} opts.body
         * @param {BasicTransactionApi~contractDeployTransactionCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link TransactionResult}
         */
        this.contractDeployTransaction = function(xChainId, opts, callback) {
            opts = opts || {}
            const postBody = opts.body

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling contractDeployTransaction")
            }

            const pathParams = {}
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = TransactionResult

            return this.apiClient.callApi(
                '/v2/tx/contract/deploy',
                'POST',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the contractExecutionTransaction operation.
         * @callback BasicTransactionApi~contractExecutionTransactionCallback
         * @param {String} error Error message, if any.
         * @param {TransactionResult} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * ContractExecutionTransaction
         * 배포된 컨트랙트 함수를 실행하는 트랜잭션을 생성합니다.
         * @param {String} xChainId Klaytn 체인 네트워크 ID (1001 or 8217)
         * @param {Object} opts Optional parameters
         * @param {ContractExecutionTransactionRequest} opts.body
         * @param {BasicTransactionApi~contractExecutionTransactionCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link TransactionResult}
         */
        this.contractExecutionTransaction = function(xChainId, opts, callback) {
            opts = opts || {}
            const postBody = opts.body

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling contractExecutionTransaction")
            }

            const pathParams = {}
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = TransactionResult

            return this.apiClient.callApi(
                '/v2/tx/contract/execute',
                'POST',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the legacyTransaction operation.
         * @callback BasicTransactionApi~legacyTransactionCallback
         * @param {String} error Error message, if any.
         * @param {TransactionResult} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * LegacyTransaction
         * 레거시 계정(공개키가 개인키로부터 파생된 계정)과 트랜잭션 포맷을 지원하는 트랜잭션을 생성합니다. KAS에서 처음 만드는 모든 Klaytn 계정은 기본적으로 레거시 계정입니다.
         * @param {String} xChainId Klaytn 체인 네트워크 ID (1001 or 8217)
         * @param {Object} opts Optional parameters
         * @param {LegacyTransactionRequest} opts.body
         * @param {BasicTransactionApi~legacyTransactionCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link TransactionResult}
         */
        this.legacyTransaction = function(xChainId, opts, callback) {
            opts = opts || {}
            const postBody = opts.body

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling legacyTransaction")
            }

            const pathParams = {}
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = TransactionResult

            return this.apiClient.callApi(
                '/v2/tx/legacy',
                'POST',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the processRLP operation.
         * @callback BasicTransactionApi~processRLPCallback
         * @param {String} error Error message, if any.
         * @param {TransactionResult} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * ProcessRLP
         * rlp(SigRLP 또는 TxHashRLP)를 이용하여 트랜잭션을 생성합니다. Wallet API 내 transaction API에서 나오는 rlp 값은 서명값을 포함하는 TxHashRLP 포맷입니다. 서명값을 포함하지 않은 SigRLP 값의 경우 caver를 이용하면 더욱 쉽게 만들 수 있습니다.  caver에서 각 트랜잭션 메서드로 SigRLP를 만들고자 할 경우 `getRLPEncodingForSignature()`, TxHashRLP를 만들고자 할 경우 `getRLPEncoding()`를 사용하시면 됩니다. SigRLP의 경우 해당 계정풀에서 생성한 것에 한해 `from`의 계정으로 서명을 합니다. 각 트랜잭션 타입별 SigRLP, TxHashRLP에 대한 자세한 설명은 [Klaytn Docs](https://docs.klaytn.com/klaytn/design/transactions)를 참고하시기 바랍니다.
         * @param {String} xChainId Klaytn 체인 네트워크 ID (1001 or 8217)
         * @param {Object} opts Optional parameters
         * @param {ProcessRLPRequest} opts.body
         * @param {BasicTransactionApi~processRLPCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link TransactionResult}
         */
        this.processRLP = function(xChainId, opts, callback) {
            opts = opts || {}
            const postBody = opts.body

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling processRLP")
            }

            const pathParams = {}
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = TransactionResult

            return this.apiClient.callApi(
                '/v2/tx/rlp',
                'POST',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the transactionReceipt operation.
         * @callback BasicTransactionApi~transactionReceiptCallback
         * @param {String} error Error message, if any.
         * @param {TransactionReceipt} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * TransactionReceipt
         * 트랜잭션 해시값으로 해당 트랜잭션 실행 결과를 조회합니다. 응답의 `status` 필드를 통해 실행 성공 여부를 알 수 있습니다.
         * @param {String} xChainId Klaytn 체인 네트워크 ID (1001 or 8217)
         * @param {String} transactionHash 트랜잭션 해시값
         * @param {BasicTransactionApi~transactionReceiptCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link TransactionReceipt}
         */
        this.transactionReceipt = function(xChainId, transactionHash, callback) {
            const postBody = null

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling transactionReceipt")
            }

            // verify the required parameter 'transactionHash' is set
            if (transactionHash === undefined || transactionHash === null) {
                throw new Error("Missing the required parameter 'transactionHash' when calling transactionReceipt")
            }

            const pathParams = {
                'transaction-hash': transactionHash,
            }
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = TransactionReceipt

            return this.apiClient.callApi(
                '/v2/tx/{transaction-hash}',
                'GET',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the valueTransferTransaction operation.
         * @callback BasicTransactionApi~valueTransferTransactionCallback
         * @param {String} error Error message, if any.
         * @param {TransactionResult} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * ValueTransferTransaction
         * 클레이 전송 및 메모를 포함한 클레이 전송에 사용되는 트랜잭션을 생성합니다.
         * @param {String} xChainId Klaytn 체인 네트워크 ID (1001 or 8217)
         * @param {Object} opts Optional parameters
         * @param {ValueTransferTransactionRequest} opts.body
         * @param {BasicTransactionApi~valueTransferTransactionCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link TransactionResult}
         */
        this.valueTransferTransaction = function(xChainId, opts, callback) {
            opts = opts || {}
            const postBody = opts.body

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling valueTransferTransaction")
            }

            const pathParams = {}
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = TransactionResult

            return this.apiClient.callApi(
                '/v2/tx/value',
                'POST',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }
    }

    return exports
})
