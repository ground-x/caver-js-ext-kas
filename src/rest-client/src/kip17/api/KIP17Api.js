/**
 * KIP-17 API
 *   # Error Codes  ## 400: Bad Request   | Code | Messages |   | --- | --- |   | 1100050 | incorrect request 1100101 | data don't exist 1100251 | its value is out of range; size 1104401 | failed to get an account |   ## 404: Not Found   | Code | Messages |   | --- | --- |   | 1104404 | Token not found |   ## 409: Conflict   | Code | Messages |   | --- | --- |   | 1104400 | Duplicate alias - test |
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

const ApiClient = require('../../ApiClient')
const ApproveAllKip17Request = require('../model/ApproveAllKip17Request')
const ApproveKip17TokenRequest = require('../model/ApproveKip17TokenRequest')
const BurnKip17TokenRequest = require('../model/BurnKip17TokenRequest')
const DeployKip17ContractRequest = require('../model/DeployKip17ContractRequest')
const ErrorResponse = require('../model/ErrorResponse')
const GetKip17TokenHistoryResponse = require('../model/GetKip17TokenHistoryResponse')
const GetKip17TokenResponse = require('../model/GetKip17TokenResponse')
const GetOwnerKip17TokensResponse = require('../model/GetOwnerKip17TokensResponse')
const Kip17ContractInfoResponse = require('../model/Kip17ContractInfoResponse')
const Kip17ContractListResponse = require('../model/Kip17ContractListResponse')
const Kip17TokenListResponse = require('../model/Kip17TokenListResponse')
const Kip17TransactionStatusResponse = require('../model/Kip17TransactionStatusResponse')
const MintKip17TokenRequest = require('../model/MintKip17TokenRequest')
const TransferKip17TokenRequest = require('../model/TransferKip17TokenRequest')

/**
 * KIP17 service.
 * @class KIP17Api
 * @version 1.0
 */
class KIP17Api {
    /**
     * Constructs a new KIP17Api.
     * @alias KIP17Api
     * @class
     * @param {ApiClient} [apiClient] Optional API client implementation to use,
     * default to {@link ApiClient#instance} if unspecified.
     */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance
    }

    /**
     * Callback function to receive the result of the approveAll operation.
     * @callback KIP17Api~approveAllCallback
     * @param {String} error Error message, if any.
     * @param {Kip17TransactionStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Approve token transfer
     * Turns on/off transfer approval from the third party, &#x60;to&#x60;, for all tokens in a contract.&lt;p&gt;&lt;/p&gt;
     * @param {Object} opts Optional parameters
     * @param {KIP17Api~approveAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Kip17TransactionStatusResponse}
     */
    approveAll(xChainId, contractAddressOrAlias, opts, callback) {
        opts = opts || {}
        const postBody = opts.body

        const pathParams = {
            'contract-address-or-alias': contractAddressOrAlias,
        }
        const queryParams = {}
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = ['application/json']
        const accepts = ['application/json']
        const returnType = Kip17TransactionStatusResponse

        return this.apiClient.callApi(
            '/v1/contract/{contract-address-or-alias}/approveall',
            'POST',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the approveToken operation.
     * @callback KIP17Api~approveTokenCallback
     * @param {String} error Error message, if any.
     * @param {Kip17TransactionStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Token transfer approval
     * Approves a third party &#x60;to&#x60; to transfer contract tokens by the contract token owner &#x60;from&#x60;. Unless &#x60;from&#x60; adderss is owner, the status of the transaction through this API becomes &#x60;reverted&#x60;.&lt;p&gt;&lt;/p&gt;
     * @param {Object} opts Optional parameters
     * @param {KIP17Api~approveTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Kip17TransactionStatusResponse}
     */
    approveToken(xChainId, contractAddressOrAlias, tokenId, opts, callback) {
        opts = opts || {}
        const postBody = opts.body

        const pathParams = {
            'contract-address-or-alias': contractAddressOrAlias,
            'token-id': tokenId,
        }
        const queryParams = {}
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = ['application/json']
        const accepts = ['application/json']
        const returnType = Kip17TransactionStatusResponse

        return this.apiClient.callApi(
            '/v1/contract/{contract-address-or-alias}/approve/{token-id}',
            'POST',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the burnToken operation.
     * @callback KIP17Api~burnTokenCallback
     * @param {String} error Error message, if any.
     * @param {Kip17TransactionStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Burn a KIP-17 token
     * Burns a token. Unless the requested &#x60;from&#x60; address is the owner, or have authority to burn, the transaction through this API becomes &#x60;reverted&#x60;.&lt;p&gt;&lt;/p&gt;
     * @param {Object} opts Optional parameters
     * @param {KIP17Api~burnTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Kip17TransactionStatusResponse}
     */
    burnToken(xChainId, contractAddressOrAlias, tokenId, opts, callback) {
        opts = opts || {}
        const postBody = opts.body

        const pathParams = {
            'contract-address-or-alias': contractAddressOrAlias,
            'token-id': tokenId,
        }
        const queryParams = {}
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = ['application/json']
        const accepts = ['application/json']
        const returnType = Kip17TransactionStatusResponse

        return this.apiClient.callApi(
            '/v1/contract/{contract-address-or-alias}/token/{token-id}',
            'DELETE',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the deployContract operation.
     * @callback KIP17Api~deployContractCallback
     * @param {String} error Error message, if any.
     * @param {Kip17TransactionStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deploy KIP-17 contract
     * Deploys a new KIP-17 contract with the submitted parameter.&lt;p&gt;&lt;/p&gt;
     * @param {Object} opts Optional parameters
     * @param {KIP17Api~deployContractCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Kip17TransactionStatusResponse}
     */
    deployContract(xChainId, opts, callback) {
        opts = opts || {}
        const postBody = opts.body

        const pathParams = {}
        const queryParams = {}
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = ['application/json']
        const accepts = ['application/json']
        const returnType = Kip17TransactionStatusResponse

        return this.apiClient.callApi(
            '/v1/contract',
            'POST',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the getContract operation.
     * @callback KIP17Api~getContractCallback
     * @param {String} error Error message, if any.
     * @param {Kip17ContractInfoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query KIP-17 contract information
     * Queries KIP-17 contract information with contract address or alias.&lt;p&gt;&lt;/p&gt;
     * @param {KIP17Api~getContractCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Kip17ContractInfoResponse}
     */
    getContract(xChainId, contractAddressOrAlias, callback) {
        const postBody = null

        const pathParams = {
            'contract-address-or-alias': contractAddressOrAlias,
        }
        const queryParams = {}
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = []
        const accepts = ['application/json']
        const returnType = Kip17ContractInfoResponse

        return this.apiClient.callApi(
            '/v1/contract/{contract-address-or-alias}',
            'GET',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the getOwnerTokens operation.
     * @callback KIP17Api~getOwnerTokensCallback
     * @param {String} error Error message, if any.
     * @param {GetOwnerKip17TokensResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query the token list of the particular token owner
     * Queries the token list of the contract which a particular EOA owns.&lt;p&gt;&lt;/p&gt;
     * @param {Object} opts Optional parameters
     * @param {KIP17Api~getOwnerTokensCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link GetOwnerKip17TokensResponse}
     */
    getOwnerTokens(xChainId, contractAddressOrAlias, ownerAddress, opts, callback) {
        opts = opts || {}
        const postBody = null

        const pathParams = {
            'contract-address-or-alias': contractAddressOrAlias,
            'owner-address': ownerAddress,
        }
        const queryParams = {
            size: opts.size,
            cursor: opts.cursor,
        }
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = []
        const accepts = ['application/json']
        const returnType = GetOwnerKip17TokensResponse

        return this.apiClient.callApi(
            '/v1/contract/{contract-address-or-alias}/owner/{owner-address}',
            'GET',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the getToken operation.
     * @callback KIP17Api~getTokenCallback
     * @param {String} error Error message, if any.
     * @param {GetKip17TokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query token information of a particular KIP-17 contract
     * Sets a token ID with contract address or alias to query the token information of a specific contract.&lt;p&gt;&lt;/p&gt;
     * @param {KIP17Api~getTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link GetKip17TokenResponse}
     */
    getToken(xChainId, contractAddressOrAlias, tokenId, callback) {
        const postBody = null

        const pathParams = {
            'contract-address-or-alias': contractAddressOrAlias,
            'token-id': tokenId,
        }
        const queryParams = {}
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = []
        const accepts = ['application/json']
        const returnType = GetKip17TokenResponse

        return this.apiClient.callApi(
            '/v1/contract/{contract-address-or-alias}/token/{token-id}',
            'GET',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the getTokenHistory operation.
     * @callback KIP17Api~getTokenHistoryCallback
     * @param {String} error Error message, if any.
     * @param {GetKip17TokenHistoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query the list of change in token ownership
     * Queries the list of token transfer history starting from the minting. Each response item refers the transfer history. &lt;p&gt;&lt;/p&gt;
     * @param {Object} opts Optional parameters
     * @param {KIP17Api~getTokenHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link GetKip17TokenHistoryResponse}
     */
    getTokenHistory(xChainId, contractAddressOrAlias, tokenId, opts, callback) {
        opts = opts || {}
        const postBody = null

        const pathParams = {
            'contract-address-or-alias': contractAddressOrAlias,
            'token-id': tokenId,
        }
        const queryParams = {
            size: opts.size,
            cursor: opts.cursor,
        }
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = []
        const accepts = ['application/json']
        const returnType = GetKip17TokenHistoryResponse

        return this.apiClient.callApi(
            '/v1/contract/{contract-address-or-alias}/token/{token-id}/history',
            'GET',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the listContractsInDeployerPool operation.
     * @callback KIP17Api~listContractsInDeployerPoolCallback
     * @param {String} error Error message, if any.
     * @param {Kip17ContractListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get KIP-17 Contract List
     * Gets the list of KIP-17 contracts deployed in the requested deployer pool. Unless specified the pool type, the default pool is queried.&lt;p&gt;&lt;/p&gt;
     * @param {Object} opts Optional parameters
     * @param {KIP17Api~listContractsInDeployerPoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Kip17ContractListResponse}
     */
    listContractsInDeployerPool(xChainId, opts, callback) {
        opts = opts || {}
        const postBody = null

        const pathParams = {}
        const queryParams = {
            size: opts.size,
            cursor: opts.cursor,
        }
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = []
        const accepts = ['application/json']
        const returnType = Kip17ContractListResponse

        return this.apiClient.callApi(
            '/v1/contract',
            'GET',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the listTokens operation.
     * @callback KIP17Api~listTokensCallback
     * @param {String} error Error message, if any.
     * @param {Kip17TokenListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query the list of tokens minted by a KIP-17 contract
     * Queries the list of all tokens minted with a specific KIP-17 contract. Select the contract address or alias to query.&lt;p&gt;&lt;/p&gt;
     * @param {Object} opts Optional parameters
     * @param {KIP17Api~listTokensCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Kip17TokenListResponse}
     */
    listTokens(xChainId, contractAddressOrAlias, opts, callback) {
        opts = opts || {}
        const postBody = null

        const pathParams = {
            'contract-address-or-alias': contractAddressOrAlias,
        }
        const queryParams = {
            size: opts.size,
            cursor: opts.cursor,
        }
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = []
        const accepts = ['application/json']
        const returnType = Kip17TokenListResponse

        return this.apiClient.callApi(
            '/v1/contract/{contract-address-or-alias}/token',
            'GET',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the mintToken operation.
     * @callback KIP17Api~mintTokenCallback
     * @param {String} error Error message, if any.
     * @param {Kip17TransactionStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mints KIP-17 contract token
     * Mints a new token on the given KIP-17 contract. Contract address or alias are available to target the contract. Do not mint tokens to accounts out of the KAS account pool. All APIs of KIP-17 allow processes only with accounts in the KAS account pool.&lt;p&gt;&lt;/p&gt;
     * @param {Object} opts Optional parameters
     * @param {KIP17Api~mintTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Kip17TransactionStatusResponse}
     */
    mintToken(xChainId, contractAddressOrAlias, opts, callback) {
        opts = opts || {}
        const postBody = opts.body

        const pathParams = {
            'contract-address-or-alias': contractAddressOrAlias,
        }
        const queryParams = {}
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = ['application/json']
        const accepts = ['application/json']
        const returnType = Kip17TransactionStatusResponse

        return this.apiClient.callApi(
            '/v1/contract/{contract-address-or-alias}/token',
            'POST',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the transferToken operation.
     * @callback KIP17Api~transferTokenCallback
     * @param {String} error Error message, if any.
     * @param {Kip17TransactionStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transfer a KIP-17 token
     * Transfers a token. If &#x60;sender&#x60; and &#x60;owner&#x60; mismatched, &#x60;sender&#x60; should have the authority to transfer the token.&lt;p&gt;&lt;/p&gt;  Note: This API requires two KRNs; for deployer pool and sender.&lt;p&gt;&lt;/p&gt;  - The first KRN for the &#x60;deployer pool&#x60; should have &#x60;krn:*:kip17:*:account-pool:*&#x60; format and confirm whether API caller has authority to call a contract. Klaytn contract is publicly available and anyone who knows the address can call the contract function, however, it requires indirect measures such as observing network communication unless contract owner reveals the address. Therefore, KIP-17 API assumes that the contract owner calls the contract function only with veiled address. - The second KRN for the &#x60;sender&#x60; should have &#x60;krn:*:wallet:*:account-pool:*&#x60; format. KIP-17 API is currently available to transfer tokens with the accounts created from the account pool. - As all other APIs, &#x60;x-krn&#x60; has default value if excluded.&lt;p&gt;&lt;/p&gt;
     * @param {Object} opts Optional parameters
     * @param {KIP17Api~transferTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Kip17TransactionStatusResponse}
     */
    transferToken(xChainId, contractAddressOrAlias, tokenId, opts, callback) {
        opts = opts || {}
        const postBody = opts.body

        const pathParams = {
            'contract-address-or-alias': contractAddressOrAlias,
            'token-id': tokenId,
        }
        const queryParams = {}
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = ['application/json']
        const accepts = ['application/json']
        const returnType = Kip17TransactionStatusResponse

        return this.apiClient.callApi(
            '/v1/contract/{contract-address-or-alias}/token/{token-id}',
            'POST',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
}
module.exports = KIP17Api
