/*
 * KIP-17 API
 *   # Error Codes  ## 400: Bad Request   | Code | Messages |   | --- | --- |   | 1100050 | incorrect request 1100101 | data don't exist 1100251 | its value is out of range; size 1104401 | failed to get an account |   ## 404: Not Found   | Code | Messages |   | --- | --- |   | 1104404 | Token not found |   ## 409: Conflict   | Code | Messages |   | --- | --- |   | 1104400 | Duplicate alias - test |
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

;(function(root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define([
            '../../ApiClient',
            '../model/ApproveAllKip17Request',
            '../model/ApproveKip17TokenRequest',
            '../model/BurnKip17TokenRequest',
            '../model/DeployKip17ContractRequest',
            '../model/ErrorResponse',
            '../model/GetKip17TokenHistoryResponse',
            '../model/GetKip17TokenResponse',
            '../model/GetOwnerKip17TokensResponse',
            '../model/Kip17ContractInfoResponse',
            '../model/Kip17ContractListResponse',
            '../model/Kip17TokenListResponse',
            '../model/Kip17TransactionStatusResponse',
            '../model/MintKip17TokenRequest',
            '../model/TransferKip17TokenRequest',
        ], factory)
    } else if (typeof module === 'object' && module.exports) {
        // CommonJS-like environments that support module.exports, like Node.
        module.exports = factory(
            require('../../ApiClient'),
            require('../model/ApproveAllKip17Request'),
            require('../model/ApproveKip17TokenRequest'),
            require('../model/BurnKip17TokenRequest'),
            require('../model/DeployKip17ContractRequest'),
            require('../model/ErrorResponse'),
            require('../model/GetKip17TokenHistoryResponse'),
            require('../model/GetKip17TokenResponse'),
            require('../model/GetOwnerKip17TokensResponse'),
            require('../model/Kip17ContractInfoResponse'),
            require('../model/Kip17ContractListResponse'),
            require('../model/Kip17TokenListResponse'),
            require('../model/Kip17TransactionStatusResponse'),
            require('../model/MintKip17TokenRequest'),
            require('../model/TransferKip17TokenRequest')
        )
    } else {
        // Browser globals (root is window)
        if (!root.Kip17Api) {
            root.Kip17Api = {}
        }
        root.Kip17Api.KIP17Api = factory(
            root.Kip17Api.ApiClient,
            root.Kip17Api.ApproveAllKip17Request,
            root.Kip17Api.ApproveKip17TokenRequest,
            root.Kip17Api.BurnKip17TokenRequest,
            root.Kip17Api.DeployKip17ContractRequest,
            root.Kip17Api.ErrorResponse,
            root.Kip17Api.GetKip17TokenHistoryResponse,
            root.Kip17Api.GetKip17TokenResponse,
            root.Kip17Api.GetOwnerKip17TokensResponse,
            root.Kip17Api.Kip17ContractInfoResponse,
            root.Kip17Api.Kip17ContractListResponse,
            root.Kip17Api.Kip17TokenListResponse,
            root.Kip17Api.Kip17TransactionStatusResponse,
            root.Kip17Api.MintKip17TokenRequest,
            root.Kip17Api.TransferKip17TokenRequest
        )
    }
})(this, function(
    ApiClient,
    ApproveAllKip17Request,
    ApproveKip17TokenRequest,
    BurnKip17TokenRequest,
    DeployKip17ContractRequest,
    ErrorResponse,
    GetKip17TokenHistoryResponse,
    GetKip17TokenResponse,
    GetOwnerKip17TokensResponse,
    Kip17ContractInfoResponse,
    Kip17ContractListResponse,
    Kip17TokenListResponse,
    Kip17TransactionStatusResponse,
    MintKip17TokenRequest,
    TransferKip17TokenRequest
) {
    /**
     * KIP17 service.
     * @class KIP17Api
     * @version 1.0
     */

    /**
     * Constructs a new KIP17Api.
     * @alias KIP17Api
     * @class
     * @param {ApiClient} [apiClient] Optional API client implementation to use,
     * default to {@link ApiClient#instance} if unspecified.
     */
    const KIP17Api = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance

        /**
         * Callback function to receive the result of the approveAll operation.
         * @callback KIP17Api~approveAllCallback
         * @param {String} error Error message, if any.
         * @param {Kip17TransactionStatusResponse} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * ApproveAll
         * Turns on/off transfer approval from the third party, `to`, for all tokens in a contract.<p></p>
         * @param {String} xChainId Klaytn Network Chain ID (1001 or 8217)
         * @param {String} contractAddressOrAlias Contract address (Starting with 0x in hexadecimal) or alias
         * @param {Object} opts Optional parameters
         * @param {ApproveAllKip17Request} opts.body
         * @param {KIP17Api~approveAllCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link Kip17TransactionStatusResponse}
         */
        this.approveAll = function(xChainId, contractAddressOrAlias, opts, callback) {
            opts = opts || {}
            const postBody = opts.body

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling approveAll")
            }

            // verify the required parameter 'contractAddressOrAlias' is set
            if (contractAddressOrAlias === undefined || contractAddressOrAlias === null) {
                throw new Error("Missing the required parameter 'contractAddressOrAlias' when calling approveAll")
            }

            const pathParams = {
                'contract-address-or-alias': contractAddressOrAlias,
            }
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = Kip17TransactionStatusResponse

            return this.apiClient.callApi(
                '/v1/contract/{contract-address-or-alias}/approveall',
                'POST',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the approveToken operation.
         * @callback KIP17Api~approveTokenCallback
         * @param {String} error Error message, if any.
         * @param {Kip17TransactionStatusResponse} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * ApproveToken
         * Approves a third party `to` to transfer contract tokens by the contract token owner `from`. Unless `from` adderss is owner, the status of the transaction through this API becomes `reverted`.<p></p>
         * @param {String} xChainId Klaytn Network Chain ID (1001 or 8217)
         * @param {String} contractAddressOrAlias Contract address (Starting with 0x in hexadecimal) or alias
         * @param {String} tokenId Token ID for a third party to have token transfer authority
         * @param {Object} opts Optional parameters
         * @param {ApproveKip17TokenRequest} opts.body
         * @param {KIP17Api~approveTokenCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link Kip17TransactionStatusResponse}
         */
        this.approveToken = function(xChainId, contractAddressOrAlias, tokenId, opts, callback) {
            opts = opts || {}
            const postBody = opts.body

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling approveToken")
            }

            // verify the required parameter 'contractAddressOrAlias' is set
            if (contractAddressOrAlias === undefined || contractAddressOrAlias === null) {
                throw new Error("Missing the required parameter 'contractAddressOrAlias' when calling approveToken")
            }

            // verify the required parameter 'tokenId' is set
            if (tokenId === undefined || tokenId === null) {
                throw new Error("Missing the required parameter 'tokenId' when calling approveToken")
            }

            const pathParams = {
                'contract-address-or-alias': contractAddressOrAlias,
                'token-id': tokenId,
            }
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = Kip17TransactionStatusResponse

            return this.apiClient.callApi(
                '/v1/contract/{contract-address-or-alias}/approve/{token-id}',
                'POST',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the burnToken operation.
         * @callback KIP17Api~burnTokenCallback
         * @param {String} error Error message, if any.
         * @param {Kip17TransactionStatusResponse} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * BurnToken
         * Burns a token. Unless the requested `from` address is the owner, or have authority to burn, the transaction through this API becomes `reverted`.<p></p>
         * @param {String} xChainId Klaytn Network Chain ID (1001 or 8217)
         * @param {String} contractAddressOrAlias Contract address (Starting with 0x in hexadecimal) or alias
         * @param {String} tokenId Token ID to burn
         * @param {Object} opts Optional parameters
         * @param {BurnKip17TokenRequest} opts.body
         * @param {KIP17Api~burnTokenCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link Kip17TransactionStatusResponse}
         */
        this.burnToken = function(xChainId, contractAddressOrAlias, tokenId, opts, callback) {
            opts = opts || {}
            const postBody = opts.body

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling burnToken")
            }

            // verify the required parameter 'contractAddressOrAlias' is set
            if (contractAddressOrAlias === undefined || contractAddressOrAlias === null) {
                throw new Error("Missing the required parameter 'contractAddressOrAlias' when calling burnToken")
            }

            // verify the required parameter 'tokenId' is set
            if (tokenId === undefined || tokenId === null) {
                throw new Error("Missing the required parameter 'tokenId' when calling burnToken")
            }

            const pathParams = {
                'contract-address-or-alias': contractAddressOrAlias,
                'token-id': tokenId,
            }
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = Kip17TransactionStatusResponse

            return this.apiClient.callApi(
                '/v1/contract/{contract-address-or-alias}/token/{token-id}',
                'DELETE',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the deployContract operation.
         * @callback KIP17Api~deployContractCallback
         * @param {String} error Error message, if any.
         * @param {Kip17TransactionStatusResponse} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * DeployContract
         * Deploys a new KIP-17 contract with the submitted parameter.<p></p>
         * @param {String} xChainId Klaytn Network Chain ID (1001 or 8217)
         * @param {Object} opts Optional parameters
         * @param {DeployKip17ContractRequest} opts.body
         * @param {KIP17Api~deployContractCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link Kip17TransactionStatusResponse}
         */
        this.deployContract = function(xChainId, opts, callback) {
            opts = opts || {}
            const postBody = opts.body

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling deployContract")
            }

            const pathParams = {}
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = Kip17TransactionStatusResponse

            return this.apiClient.callApi(
                '/v1/contract',
                'POST',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the getContract operation.
         * @callback KIP17Api~getContractCallback
         * @param {String} error Error message, if any.
         * @param {Kip17ContractInfoResponse} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * GetContract
         * Queries KIP-17 contract information with contract address or alias.<p></p>
         * @param {String} xChainId Klaytn Network Chain ID (1001 or 8217)
         * @param {String} contractAddressOrAlias Contract address (Starting with 0x in hexadecimal) or alias
         * @param {KIP17Api~getContractCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link Kip17ContractInfoResponse}
         */
        this.getContract = function(xChainId, contractAddressOrAlias, callback) {
            const postBody = null

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling getContract")
            }

            // verify the required parameter 'contractAddressOrAlias' is set
            if (contractAddressOrAlias === undefined || contractAddressOrAlias === null) {
                throw new Error("Missing the required parameter 'contractAddressOrAlias' when calling getContract")
            }

            const pathParams = {
                'contract-address-or-alias': contractAddressOrAlias,
            }
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = Kip17ContractInfoResponse

            return this.apiClient.callApi(
                '/v1/contract/{contract-address-or-alias}',
                'GET',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the getOwnerTokens operation.
         * @callback KIP17Api~getOwnerTokensCallback
         * @param {String} error Error message, if any.
         * @param {GetOwnerKip17TokensResponse} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * GetOwnerTokens
         * Queries the token list of the contract which a particular EOA owns.<p></p>
         * @param {String} xChainId Klaytn Network Chain ID (1001 or 8217)
         * @param {String} contractAddressOrAlias Contract address (Starting with 0x in hexadecimal) or alias
         * @param {String} ownerAddress Token owner address
         * @param {Object} opts Optional parameters
         * @param {Number} opts.size Number of maximum response items (min=1, max=1000, default=100)
         * @param {String} opts.cursor Response offset
         * @param {KIP17Api~getOwnerTokensCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link GetOwnerKip17TokensResponse}
         */
        this.getOwnerTokens = function(xChainId, contractAddressOrAlias, ownerAddress, opts, callback) {
            opts = opts || {}
            const postBody = null

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling getOwnerTokens")
            }

            // verify the required parameter 'contractAddressOrAlias' is set
            if (contractAddressOrAlias === undefined || contractAddressOrAlias === null) {
                throw new Error("Missing the required parameter 'contractAddressOrAlias' when calling getOwnerTokens")
            }

            // verify the required parameter 'ownerAddress' is set
            if (ownerAddress === undefined || ownerAddress === null) {
                throw new Error("Missing the required parameter 'ownerAddress' when calling getOwnerTokens")
            }

            const pathParams = {
                'contract-address-or-alias': contractAddressOrAlias,
                'owner-address': ownerAddress,
            }
            const queryParams = {
                size: opts.size,
                cursor: opts.cursor,
            }
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = GetOwnerKip17TokensResponse

            return this.apiClient.callApi(
                '/v1/contract/{contract-address-or-alias}/owner/{owner-address}',
                'GET',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the getToken operation.
         * @callback KIP17Api~getTokenCallback
         * @param {String} error Error message, if any.
         * @param {GetKip17TokenResponse} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * GetToken
         * Sets a token ID with contract address or alias to query the token information of a specific contract.<p></p>
         * @param {String} xChainId Klaytn Network Chain ID (1001 or 8217)
         * @param {String} contractAddressOrAlias Contract address (Starting with 0x in hexadecimal) or alias
         * @param {String} tokenId Token ID to query
         * @param {KIP17Api~getTokenCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link GetKip17TokenResponse}
         */
        this.getToken = function(xChainId, contractAddressOrAlias, tokenId, callback) {
            const postBody = null

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling getToken")
            }

            // verify the required parameter 'contractAddressOrAlias' is set
            if (contractAddressOrAlias === undefined || contractAddressOrAlias === null) {
                throw new Error("Missing the required parameter 'contractAddressOrAlias' when calling getToken")
            }

            // verify the required parameter 'tokenId' is set
            if (tokenId === undefined || tokenId === null) {
                throw new Error("Missing the required parameter 'tokenId' when calling getToken")
            }

            const pathParams = {
                'contract-address-or-alias': contractAddressOrAlias,
                'token-id': tokenId,
            }
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = GetKip17TokenResponse

            return this.apiClient.callApi(
                '/v1/contract/{contract-address-or-alias}/token/{token-id}',
                'GET',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the getTokenHistory operation.
         * @callback KIP17Api~getTokenHistoryCallback
         * @param {String} error Error message, if any.
         * @param {GetKip17TokenHistoryResponse} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * GetTokenHistory
         * Queries the list of token transfer history starting from the minting. Each response item refers the transfer history. <p></p>
         * @param {String} xChainId Klaytn Network Chain ID (1001 or 8217)
         * @param {String} contractAddressOrAlias Contract address (Starting with 0x in hexadecimal) or alias
         * @param {String} tokenId Token ID
         * @param {Object} opts Optional parameters
         * @param {Number} opts.size Number of maximum response items (min=1, max=1000, default=100)
         * @param {String} opts.cursor Response offset
         * @param {KIP17Api~getTokenHistoryCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link GetKip17TokenHistoryResponse}
         */
        this.getTokenHistory = function(xChainId, contractAddressOrAlias, tokenId, opts, callback) {
            opts = opts || {}
            const postBody = null

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling getTokenHistory")
            }

            // verify the required parameter 'contractAddressOrAlias' is set
            if (contractAddressOrAlias === undefined || contractAddressOrAlias === null) {
                throw new Error("Missing the required parameter 'contractAddressOrAlias' when calling getTokenHistory")
            }

            // verify the required parameter 'tokenId' is set
            if (tokenId === undefined || tokenId === null) {
                throw new Error("Missing the required parameter 'tokenId' when calling getTokenHistory")
            }

            const pathParams = {
                'contract-address-or-alias': contractAddressOrAlias,
                'token-id': tokenId,
            }
            const queryParams = {
                size: opts.size,
                cursor: opts.cursor,
            }
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = GetKip17TokenHistoryResponse

            return this.apiClient.callApi(
                '/v1/contract/{contract-address-or-alias}/token/{token-id}/history',
                'GET',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the listContractsInDeployerPool operation.
         * @callback KIP17Api~listContractsInDeployerPoolCallback
         * @param {String} error Error message, if any.
         * @param {Kip17ContractListResponse} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * ListContractsInDeployerPool
         * Gets the list of KIP-17 contracts deployed in the requested deployer pool. Unless specified the pool type, the default pool is queried.<p></p>
         * @param {String} xChainId Klaytn Network Chain ID (1001 or 8217)
         * @param {Object} opts Optional parameters
         * @param {String} opts.size Number of maximum response items (min=1, max=1000, default=100)
         * @param {String} opts.cursor Response offset
         * @param {KIP17Api~listContractsInDeployerPoolCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link Kip17ContractListResponse}
         */
        this.listContractsInDeployerPool = function(xChainId, opts, callback) {
            opts = opts || {}
            const postBody = null

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling listContractsInDeployerPool")
            }

            const pathParams = {}
            const queryParams = {
                size: opts.size,
                cursor: opts.cursor,
            }
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = Kip17ContractListResponse

            return this.apiClient.callApi(
                '/v1/contract',
                'GET',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the listTokens operation.
         * @callback KIP17Api~listTokensCallback
         * @param {String} error Error message, if any.
         * @param {Kip17TokenListResponse} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * ListTokens
         * Queries the list of all tokens minted with a specific KIP-17 contract. Select the contract address or alias to query.<p></p>
         * @param {String} xChainId Klaytn Network Chain ID (1001 or 8217)
         * @param {String} contractAddressOrAlias Contract address (Starting with 0x in hexadecimal) or alias
         * @param {Object} opts Optional parameters
         * @param {Number} opts.size Number of maximum response items (min=1, max=1000, default=100)
         * @param {String} opts.cursor Response offset
         * @param {KIP17Api~listTokensCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link Kip17TokenListResponse}
         */
        this.listTokens = function(xChainId, contractAddressOrAlias, opts, callback) {
            opts = opts || {}
            const postBody = null

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling listTokens")
            }

            // verify the required parameter 'contractAddressOrAlias' is set
            if (contractAddressOrAlias === undefined || contractAddressOrAlias === null) {
                throw new Error("Missing the required parameter 'contractAddressOrAlias' when calling listTokens")
            }

            const pathParams = {
                'contract-address-or-alias': contractAddressOrAlias,
            }
            const queryParams = {
                size: opts.size,
                cursor: opts.cursor,
            }
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = Kip17TokenListResponse

            return this.apiClient.callApi(
                '/v1/contract/{contract-address-or-alias}/token',
                'GET',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the mintToken operation.
         * @callback KIP17Api~mintTokenCallback
         * @param {String} error Error message, if any.
         * @param {Kip17TransactionStatusResponse} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * MintToken
         * Mints a new token on the given KIP-17 contract. Contract address or alias are available to target the contract. Do not mint tokens to accounts out of the KAS account pool. All APIs of KIP-17 allow processes only with accounts in the KAS account pool.<p></p>
         * @param {String} xChainId Klaytn Network Chain ID (1001 or 8217)
         * @param {String} contractAddressOrAlias Contract address (Starting with 0x in hexadecimal) or alias
         * @param {Object} opts Optional parameters
         * @param {MintKip17TokenRequest} opts.body
         * @param {KIP17Api~mintTokenCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link Kip17TransactionStatusResponse}
         */
        this.mintToken = function(xChainId, contractAddressOrAlias, opts, callback) {
            opts = opts || {}
            const postBody = opts.body

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling mintToken")
            }

            // verify the required parameter 'contractAddressOrAlias' is set
            if (contractAddressOrAlias === undefined || contractAddressOrAlias === null) {
                throw new Error("Missing the required parameter 'contractAddressOrAlias' when calling mintToken")
            }

            const pathParams = {
                'contract-address-or-alias': contractAddressOrAlias,
            }
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = Kip17TransactionStatusResponse

            return this.apiClient.callApi(
                '/v1/contract/{contract-address-or-alias}/token',
                'POST',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the transferToken operation.
         * @callback KIP17Api~transferTokenCallback
         * @param {String} error Error message, if any.
         * @param {Kip17TransactionStatusResponse} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * TransferToken
         * Transfers a token. If `sender` and `owner` mismatched, `sender` should have the authority to transfer the token.<p></p>  Note: This API requires two KRNs; for deployer pool and sender.<p></p>  - The first KRN for the `deployer pool` should have `krn:*:kip17:*:account-pool:*` format and confirm whether API caller has authority to call a contract. Klaytn contract is publicly available and anyone who knows the address can call the contract function, however, it requires indirect measures such as observing network communication unless contract owner reveals the address. Therefore, KIP-17 API assumes that the contract owner calls the contract function only with veiled address. - The second KRN for the `sender` should have `krn:*:wallet:*:account-pool:*` format. KIP-17 API is currently available to transfer tokens with the accounts created from the account pool. - As all other APIs, `x-krn` has default value if excluded.<p></p>
         * @param {String} xChainId Klaytn Network Chain ID (1001 or 8217)
         * @param {String} contractAddressOrAlias Contract address (Starting with 0x in hexadecimal) or alias
         * @param {String} tokenId Token ID
         * @param {Object} opts Optional parameters
         * @param {TransferKip17TokenRequest} opts.body
         * @param {KIP17Api~transferTokenCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link Kip17TransactionStatusResponse}
         */
        this.transferToken = function(xChainId, contractAddressOrAlias, tokenId, opts, callback) {
            opts = opts || {}
            const postBody = opts.body

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling transferToken")
            }

            // verify the required parameter 'contractAddressOrAlias' is set
            if (contractAddressOrAlias === undefined || contractAddressOrAlias === null) {
                throw new Error("Missing the required parameter 'contractAddressOrAlias' when calling transferToken")
            }

            // verify the required parameter 'tokenId' is set
            if (tokenId === undefined || tokenId === null) {
                throw new Error("Missing the required parameter 'tokenId' when calling transferToken")
            }

            const pathParams = {
                'contract-address-or-alias': contractAddressOrAlias,
                'token-id': tokenId,
            }
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = Kip17TransactionStatusResponse

            return this.apiClient.callApi(
                '/v1/contract/{contract-address-or-alias}/token/{token-id}',
                'POST',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }
    }

    return KIP17Api
})
