/**
 * KIP-7 API
 * # Introduction The KIP-17 API helps BApp (Blockchain Application) developers to manage contracts and tokens created in accordance with the [KIP-7](https://docs.klaytnapi.com/v/en/api#kip-7-api) standard, which is Klaytn's technical speficication for Fungible Tokens.  The functionality of the multiple endpoints enables you to do the following actions: - deploy smart contracts - manage the entire life cycle of an FT from minting, to sending and burning - get contract or token data - authorize a third party to execute token transfers - send tokens on behalf of the owner   For more details on KAS, please refer to [KAS Docs](https://docs.klaytnapi.com/). If you have any questions or comments, please leave them in the [Klaytn Developers Forum](http://forum.klaytn.com).    **alias**  When a method of the KIP-17 API requires a contract address, you can use the contract **alias**. You can give the contract an alias when deploying, and use it in place of the complicated address.  **deployer**  When you create a contract, you will be assigned one `deployer` address per Credential, which is the account address used for managing contracts. In KIP-7 API, this address is used in many different token-related operations. You can find the `deployer` address with [KIP7Deployer](#operation/GetDefaultDeployer).  Even with contracts created using SDKs like \"caver\", you can still use the contract address and [Wallet API](https://refs.klaytnapi.com/en/wallet/latest) account to manage your contracts and tokens.  # Fee Payer Options  KAS KIP-17 supports four ways to pay the transaction fees.<br />  **1. Only using KAS Global FeePayer Account** <br /> Sends all transactions using KAS Global FeePayer Account. ``` {     \"options\": {       \"enableGlobalFeePayer\": true     } } ```  <br />  **2. Using User FeePayer Account** <br /> Sends all transactions using User FeePayer Account. ``` {   \"options\": {     \"enableGlobalFeePayer\": false,     \"userFeePayer\": {       \"krn\": \"krn:1001:wallet:20bab367-141b-439a-8b4c-ae8788b86316:feepayer-pool:default\",       \"address\": \"0xd6905b98E4Ba43a24E842d2b66c1410173791cab\"     }   } } ```  <br />  **3. Using both KAS Global FeePayer Account + User FeePayer Account** <br /> Sends transactions using User FeePayer Account by default, and switches to the KAS Global FeePayer Account when balances are insufficient. ``` {   \"options\": {     \"enableGlobalFeePayer\": true,     \"userFeePayer\": {       \"krn\": \"krn:1001:wallet:20bab367-141b-439a-8b4c-ae8788b86316:feepayer-pool:default\",       \"address\": \"0xd6905b98E4Ba43a24E842d2b66c1410173791cab\"     }   } } ```  <br />  **4. Not using FeePayer Account** <br /> Sends transactions the default way, paying the transaction fee from the user's account. ``` {   \"options\": {     \"enableGlobalFeePayer\": false   } } ```  # Error Code This section contains the errors that might occur when using the KIP-17 API. KAS uses HTTP status codes. More details can be found in this [link](https://developer.mozilla.org/en/docs/Web/HTTP/Status).
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

const ApiClient = require('../../ApiClient')
const AddMinterKip7Request = require('../model/AddMinterKip7Request')
const ApproveKip7TokenRequest = require('../model/ApproveKip7TokenRequest')
const BurnFromKip7TokenRequest = require('../model/BurnFromKip7TokenRequest')
const BurnKip7TokenRequest = require('../model/BurnKip7TokenRequest')
const ErrorResponse = require('../model/ErrorResponse')
const Kip7TokenBalanceResponse = require('../model/Kip7TokenBalanceResponse')
const Kip7TransactionStatusResponse = require('../model/Kip7TransactionStatusResponse')
const MintKip7TokenRequest = require('../model/MintKip7TokenRequest')
const TransferKip7TokenFromRequest = require('../model/TransferKip7TokenFromRequest')
const TransferKip7TokenRequest = require('../model/TransferKip7TokenRequest')

/**
 * Kip7Token service.
 * @class Kip7TokenApi
 * @version 1.0
 */
class Kip7TokenApi {
    /**
     * Constructs a new Kip7TokenApi.
     * @alias Kip7TokenApi
     * @class
     * @param {ApiClient} [apiClient] Optional API client implementation to use,
     * default to {@link ApiClient#instance} if unspecified.
     */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance
    }

    /**
     * Callback function to receive the result of the addMinter operation.
     * @callback Kip7TokenApi~addMinterCallback
     * @param {String} error Error message, if any.
     * @param {Kip7TransactionStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Minter
     * Grants a specified account the authority to mint and burn tokens from a contract. You can remove the authority by using [Remove Minter](#operation/RenounceMinter).  &gt; **NOTE**  &gt; &gt; &#x60;minter&#x60; is the address that will be granted the authority. It needs to be managed by Wallet API in order to be use [Remove Minter](#operation/RenounceMinter). Otherwise, you have to sign and send the transaction yourself.  ##### Sender The account that sends the transaction to grant the authority for tokens. If you leave it blank, it will automatically be set to the &#x60;deployer&#x60; address as default . You can find the &#x60;deployer&#x60; address by [KIP7Deployer](#operation/GetDefaultDeployer).    You can omit the KRN if the &#x60;sender&#x60; address is managed by the KIP-7 or Wallet Service &#x60;account-pool&#x60;.&lt;br /&gt; Otherwise you have to provide the KRN object in the header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;).
     * @param {Object} opts Optional parameters
     * @param {Kip7TokenApi~addMinterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Kip7TransactionStatusResponse}
     */
    addMinter(contractAddressOrAlias, xChainId, opts, callback) {
        opts = opts || {}
        const postBody = opts.body

        const pathParams = {
            'contract-address-or-alias': contractAddressOrAlias,
        }
        const queryParams = {}
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = ['application/json']
        const accepts = ['application/json']
        const returnType = Kip7TransactionStatusResponse

        return this.apiClient.callApi(
            '/v1/contract/{contract-address-or-alias}/minter',
            'POST',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the approveToken operation.
     * @callback Kip7TokenApi~approveTokenCallback
     * @param {String} error Error message, if any.
     * @param {Kip7TransactionStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authorize to Send Token
     * Grants authority to &#x60;spender&#x60; to send a certain amount of tokens from the &#x60;owner&#x60;&#x27;s account.  To send the token as an authorized &#x60;spender&#x60;, use [Send Token on Behalf of Owner](#operation/TransferFromToken).&lt;p&gt;&lt;/p&gt;  &gt; **NOTE**  &gt; &gt; &#x60;spender&#x60; is the address that will be granted the authority. It needs to be managed by Wallet API in order to be use [Send Token on Behalf of Owner](#operation/TransferFromToken).  ##### Owner The account that owns the token, and grants authority to &#x60;spender&#x60;. If you leave it blank, it will automatically be set to the &#x60;deployer&#x60; address as default . You can find the &#x60;deployer&#x60; address by [KIP7Deployer](#operation/GetDefaultDeployer).    You can omit the KRN if the &#x60;owner&#x60; address is managed by the KIP-7 or Wallet Service &#x60;account-pool&#x60;.&lt;br /&gt; Otherwise you have to provide the KRN object in the header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;).
     * @param {Object} opts Optional parameters
     * @param {Kip7TokenApi~approveTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Kip7TransactionStatusResponse}
     */
    approveToken(xChainId, contractAddressOrAlias, opts, callback) {
        opts = opts || {}
        const postBody = opts.body

        const pathParams = {
            'contract-address-or-alias': contractAddressOrAlias,
        }
        const queryParams = {}
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = ['application/json']
        const accepts = ['application/json']
        const returnType = Kip7TransactionStatusResponse

        return this.apiClient.callApi(
            '/v1/contract/{contract-address-or-alias}/approve',
            'POST',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the burnFromToken operation.
     * @callback Kip7TokenApi~burnFromTokenCallback
     * @param {String} error Error message, if any.
     * @param {Kip7TransactionStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Burn Authorized Tokens
     * Burns the tokens from the amount that the &#x60;spender&#x60; is authorized to send, as specified by the &#x60;owner&#x60;. The remaining balance of the tokens that the &#x60;sender&#x60; is allowed to send can be found via [Get Token Balance](#operation/GetTokenBalance).&lt;p&gt;&lt;/p&gt;  ##### Spender The account that sends the transaction.  You can omit the KRN if the &#x60;spender&#x60; address is managed by the KIP-7 or Wallet Service &#x60;account-pool&#x60;.&lt;br /&gt; Otherwise you have to provide the KRN object in the header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;).
     * @param {Object} opts Optional parameters
     * @param {Kip7TokenApi~burnFromTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Kip7TransactionStatusResponse}
     */
    burnFromToken(xChainId, contractAddressOrAlias, opts, callback) {
        opts = opts || {}
        const postBody = opts.body

        const pathParams = {
            'contract-address-or-alias': contractAddressOrAlias,
        }
        const queryParams = {}
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = ['application/json']
        const accepts = ['application/json']
        const returnType = Kip7TransactionStatusResponse

        return this.apiClient.callApi(
            '/v1/contract/{contract-address-or-alias}/burn-from',
            'DELETE',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the burnToken operation.
     * @callback Kip7TokenApi~burnTokenCallback
     * @param {String} error Error message, if any.
     * @param {Kip7TransactionStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Burn Token
     * Burns tokens. The contract&#x27;s &#x60;totalSupply&#x60; will be reduced accordingly. You can find the &#x60;totalSupply&#x60; by using [Get Contract](#operation/GetContract). &lt;p&gt;&lt;/p&gt;  ##### From The account that sends the transaction to burn tokens. If you leave it blank, it will automatically be set to the &#x60;deployer&#x60; address as default . You can find the &#x60;deployer&#x60; address by [KIP7Deployer](#operation/GetDefaultDeployer).    You can omit the KRN if the &#x60;from&#x60; address is managed by the KIP-7 or Wallet Service &#x60;account-pool&#x60;.&lt;br /&gt; Otherwise you have to provide the KRN object in the header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;).
     * @param {Object} opts Optional parameters
     * @param {Kip7TokenApi~burnTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Kip7TransactionStatusResponse}
     */
    burnToken(xChainId, contractAddressOrAlias, opts, callback) {
        opts = opts || {}
        const postBody = opts.body

        const pathParams = {
            'contract-address-or-alias': contractAddressOrAlias,
        }
        const queryParams = {}
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = ['application/json']
        const accepts = ['application/json']
        const returnType = Kip7TransactionStatusResponse

        return this.apiClient.callApi(
            '/v1/contract/{contract-address-or-alias}/burn',
            'DELETE',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the getTokenAllowance operation.
     * @callback Kip7TokenApi~getTokenAllowanceCallback
     * @param {String} error Error message, if any.
     * @param {Kip7TokenBalanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Approved Balance
     * Returns the remaining balance of the tokens that the &#x60;owner&#x60; authorized the &#x60;spender&#x60; to send.&lt;p&gt;&lt;/p&gt;
     * @param {Kip7TokenApi~getTokenAllowanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Kip7TokenBalanceResponse}
     */
    getTokenAllowance(xChainId, contractAddressOrAlias, owner, spender, callback) {
        const postBody = null

        const pathParams = {
            'contract-address-or-alias': contractAddressOrAlias,
            owner: owner,
            spender: spender,
        }
        const queryParams = {}
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = []
        const accepts = ['application/json']
        const returnType = Kip7TokenBalanceResponse

        return this.apiClient.callApi(
            '/v1/contract/{contract-address-or-alias}/account/{owner}/allowance/{spender}',
            'GET',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the getTokenBalance operation.
     * @callback Kip7TokenApi~getTokenBalanceCallback
     * @param {String} error Error message, if any.
     * @param {Kip7TokenBalanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Token Balance
     * \&quot;Returns the &#x60;owner&#x60;&#x27;s balance of the tokens from a specified  KIP-7 contract. &lt;p&gt;&lt;/p&gt;  \\n\&quot;
     * @param {Kip7TokenApi~getTokenBalanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Kip7TokenBalanceResponse}
     */
    getTokenBalance(xChainId, contractAddressOrAlias, owner, callback) {
        const postBody = null

        const pathParams = {
            'contract-address-or-alias': contractAddressOrAlias,
            owner: owner,
        }
        const queryParams = {}
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = []
        const accepts = ['application/json']
        const returnType = Kip7TokenBalanceResponse

        return this.apiClient.callApi(
            '/v1/contract/{contract-address-or-alias}/account/{owner}/balance',
            'GET',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the mintToken operation.
     * @callback Kip7TokenApi~mintTokenCallback
     * @param {String} error Error message, if any.
     * @param {Kip7TransactionStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mint Token
     * Mints a specified amount of tokens to a specified account address.  The contract&#x27;s &#x60;totalSupply&#x60; will increase accordingly.&lt;p&gt;&lt;/p&gt;  ##### From The account that sends the transaction. You can enter the Klaytn account address of an authorized Minter, or leave it blank, so it will automatically be set to the &#x60;deployer&#x60; address as default . You can find the &#x60;deployer&#x60; address by [KIP7Deployer](#operation/GetDefaultDeployer).  You can omit the KRN if the &#x60;from&#x60; address is managed by the KIP-7 or Wallet Service &#x60;account-pool&#x60;.&lt;br /&gt; Otherwise you have to provide the KRN object in the header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;).   &gt; **NOTE** &gt; &gt; Remember that a contract address is not an account address managed by Wallet Service, so it can&#x27;t in &#x60;from&#x60;.
     * @param {Object} opts Optional parameters
     * @param {Kip7TokenApi~mintTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Kip7TransactionStatusResponse}
     */
    mintToken(xChainId, contractAddressOrAlias, opts, callback) {
        opts = opts || {}
        const postBody = opts.body

        const pathParams = {
            'contract-address-or-alias': contractAddressOrAlias,
        }
        const queryParams = {}
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = ['application/json']
        const accepts = ['application/json']
        const returnType = Kip7TransactionStatusResponse

        return this.apiClient.callApi(
            '/v1/contract/{contract-address-or-alias}/mint',
            'POST',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the renounceMinter operation.
     * @callback Kip7TokenApi~renounceMinterCallback
     * @param {String} error Error message, if any.
     * @param {Kip7TransactionStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Minter
     * Removes the authority granted to a specifed account to mint and burn tokens from a contract.  ##### Minter The address whose authority to mint and burn tokens will be removed.  You can omit the KRN if the &#x60;minter-address&#x60; is managed by the KIP-7 or Wallet Service &#x60;account-pool&#x60;.&lt;br /&gt; Otherwise you have to provide the KRN object in the header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;).
     * @param {Kip7TokenApi~renounceMinterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Kip7TransactionStatusResponse}
     */
    renounceMinter(contractAddressOrAlias, minterAddress, xChainId, callback) {
        const postBody = null

        const pathParams = {
            'contract-address-or-alias': contractAddressOrAlias,
            'minter-address': minterAddress,
        }
        const queryParams = {}
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = []
        const accepts = ['application/json']
        const returnType = Kip7TransactionStatusResponse

        return this.apiClient.callApi(
            '/v1/contract/{contract-address-or-alias}/minter/{minter-address}',
            'DELETE',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the transferFromToken operation.
     * @callback Kip7TokenApi~transferFromTokenCallback
     * @param {String} error Error message, if any.
     * @param {Kip7TransactionStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send Token on Behalf of Owner
     * Sends a token with an account authorized via [Approve Token Transfer](#operation/ApproveToken). You can view the remaining balance of authorized tokens by using [Get Approved Balance](#operation/GetTokenAllowance).&lt;p&gt;&lt;/p&gt;  ##### Spender The account that has been granted the authority from the &#x60;owner&#x60; to send tokens on his/her behalf.  You can omit the KRN if the &#x60;spender&#x60; address is managed by the KIP-7 or Wallet Service &#x60;account-pool&#x60;.&lt;br /&gt; Otherwise you have to provide the KRN object in the header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;).
     * @param {Object} opts Optional parameters
     * @param {Kip7TokenApi~transferFromTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Kip7TransactionStatusResponse}
     */
    transferFromToken(xChainId, contractAddressOrAlias, opts, callback) {
        opts = opts || {}
        const postBody = opts.body

        const pathParams = {
            'contract-address-or-alias': contractAddressOrAlias,
        }
        const queryParams = {}
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = ['application/json']
        const accepts = ['application/json']
        const returnType = Kip7TransactionStatusResponse

        return this.apiClient.callApi(
            '/v1/contract/{contract-address-or-alias}/transfer-from',
            'POST',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the transferToken operation.
     * @callback Kip7TokenApi~transferTokenCallback
     * @param {String} error Error message, if any.
     * @param {Kip7TransactionStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send Token
     * Sends a token to a specified address.  ##### From The account that sends the transaction to transfer tokens. If you leave it blank, it will automatically be set to the &#x60;deployer&#x60; address as default . You can find the &#x60;deployer&#x60; address by [KIP7Deployer](#operation/GetDefaultDeployer).  &lt;br/&gt;  You can omit the KRN if the &#x60;from&#x60; address is managed by the KIP-7 or Wallet Service &#x60;account-pool&#x60;.&lt;br /&gt; Otherwise you have to provide the KRN object in the header (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;).
     * @param {Object} opts Optional parameters
     * @param {Kip7TokenApi~transferTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Kip7TransactionStatusResponse}
     */
    transferToken(xChainId, contractAddressOrAlias, opts, callback) {
        opts = opts || {}
        const postBody = opts.body

        const pathParams = {
            'contract-address-or-alias': contractAddressOrAlias,
        }
        const queryParams = {}
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = ['application/json']
        const accepts = ['application/json']
        const returnType = Kip7TransactionStatusResponse

        return this.apiClient.callApi(
            '/v1/contract/{contract-address-or-alias}/transfer',
            'POST',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
}
module.exports = Kip7TokenApi
