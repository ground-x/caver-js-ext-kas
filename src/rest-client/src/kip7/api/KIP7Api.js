/**
 * KIP-7 API
 * # Introduction KIP-7 API is a RESTful API for managing KIP-7 contracts and tokens that follow the [KIP-7 Fungible Token Standard](https://kips.klaytn.com/KIPs/kip-7).   You can deploy contracts and send tokens using the default contract managing account (`deployer`) and an `alias`. And by using SDK like caver,  you can manage your contracts and tokens using [Wallet API](https://refs.klaytnapi.com/en/wallet/latest) for contracts created on the Klaytn Network.    # Error Codes  ## 400: Bad Request  | Code | Messages | | --- | --- | | 1130050 | incorrect request; spender | | 1130107 | incorrect bookmark | | 1134410 | invalid address; to</br>invalid address; owner</br>invalid address; address | | 1134411 | invalid amount; amount |  ## 404: Not Found  | Code | Messages | | --- | --- | | 1134504 | contract not found | | 1134506 | deployer not found |  ## 409: Conflict   | Code | Messages |   | --- | --- |   | 1134900 | duplicate alias 1134902 | contract already paused 1134903 | contract already unpaused |
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

const ApiClient = require('../../ApiClient')
const ApproveKip7TokenRequest = require('../model/ApproveKip7TokenRequest')
const BurnFromKip7TokenRequest = require('../model/BurnFromKip7TokenRequest')
const BurnKip7TokenRequest = require('../model/BurnKip7TokenRequest')
const DeployKip7ContractRequest = require('../model/DeployKip7ContractRequest')
const ErrorResponse = require('../model/ErrorResponse')
const Kip7ContractListResponse = require('../model/Kip7ContractListResponse')
const Kip7ContractMetadataResponse = require('../model/Kip7ContractMetadataResponse')
const Kip7TokenBalanceResponse = require('../model/Kip7TokenBalanceResponse')
const Kip7TransactionStatusResponse = require('../model/Kip7TransactionStatusResponse')
const MintKip7TokenRequest = require('../model/MintKip7TokenRequest')
const TransferKip7TokenFromRequest = require('../model/TransferKip7TokenFromRequest')
const TransferKip7TokenRequest = require('../model/TransferKip7TokenRequest')

/**
 * KIP7 service.
 * @class KIP7Api
 * @version 1.0
 */
class KIP7Api {
    /**
     * Constructs a new KIP7Api.
     * @alias KIP7Api
     * @class
     * @param {ApiClient} [apiClient] Optional API client implementation to use,
     * default to {@link ApiClient#instance} if unspecified.
     */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance
    }

    /**
     * Callback function to receive the result of the approveToken operation.
     * @callback KIP7Api~approveTokenCallback
     * @param {String} error Error message, if any.
     * @param {Kip7TransactionStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Approve KIP-7 token transfer
     * Authorizes the &#x60;spender&#x60; to send a certain amount of tokens on behalf of the &#x60;owner&#x60;.  You can execute a delegated token transfer by calling [/v1/contract/{contract-address-or-alias}/transfer-from](#opera ion/TransferFromToken) API.&lt;p&gt;&lt;/p&gt;  **Note**: Only a &#x60;spender&#x60; account address managed by Wallet API can execute delegated token transfers.  &lt;br&gt; **Note**: This API requires two types of x-krn, separated by &#x60;,&#x60; in the request header. &lt;br&gt; krn:{chain-id}:kip7:{account-id}:account-pool:default,krn:{chain-id}:wallet:{account-id}:account-pool:{pool-name}&lt;p&gt;&lt;/p&gt;  - The first KRN: Default KIP-7 &#x60;account-pool&#x60; - The second KRN: &#x60;account-pool&#x60; Wallet API, which has the &#x60;owner&#x60; account - Just as in other APIs, not including the x-krn will give it the default value.&lt;p&gt;&lt;/p&gt;
     * @param {Object} opts Optional parameters
     * @param {KIP7Api~approveTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Kip7TransactionStatusResponse}
     */
    approveToken(xChainId, contractAddressOrAlias, opts, callback) {
        opts = opts || {}
        const postBody = opts.body

        const pathParams = {
            'contract-address-or-alias': contractAddressOrAlias,
        }
        const queryParams = {}
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = ['application/json']
        const accepts = ['application/json']
        const returnType = Kip7TransactionStatusResponse

        return this.apiClient.callApi(
            '/v1/contract/{contract-address-or-alias}/approve',
            'POST',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the burnFromToken operation.
     * @callback KIP7Api~burnFromTokenCallback
     * @param {String} error Error message, if any.
     * @param {Kip7TransactionStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Burn approved KIP-7 tokens
     *  &#x60;spender&#x60; burns &#x60;owner&#x60;&#x27;s tokens on the&#x60;owner&#x60;&#x27;s behalf. The &#x60;totalSupply&#x60; on the contract will be deducted accordingly.  &lt;p&gt;&lt;/p&gt;  **Note**: This API requires two types of x-krn, separated by &#x60;,&#x60; in the request header. &lt;br&gt; krn:{chain-id}:kip7:{account-id}:account-pool:default,krn:{chain-id}:wallet:{account-id}:account-pool:{pool-name}&lt;p&gt;&lt;/p&gt;  - The first KRN: Default KIP-7 &#x60;account-pool&#x60; - The second KRN: &#x60;account-pool&#x60; Wallet API, which has the &#x60;spender&#x60; account   - Just as in other APIs, not including the x-krn will give it the default value.&lt;p&gt;&lt;/p&gt;
     * @param {Object} opts Optional parameters
     * @param {KIP7Api~burnFromTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Kip7TransactionStatusResponse}
     */
    burnFromToken(xChainId, contractAddressOrAlias, opts, callback) {
        opts = opts || {}
        const postBody = opts.body

        const pathParams = {
            'contract-address-or-alias': contractAddressOrAlias,
        }
        const queryParams = {}
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = ['application/json']
        const accepts = ['application/json']
        const returnType = Kip7TransactionStatusResponse

        return this.apiClient.callApi(
            '/v1/contract/{contract-address-or-alias}/burn-from',
            'DELETE',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the burnToken operation.
     * @callback KIP7Api~burnTokenCallback
     * @param {String} error Error message, if any.
     * @param {Kip7TransactionStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Burn KIP-7 tokens
     * Burns tokens. The &#x60;totalSupply&#x60; on the contract will be deducted accordingly.  &lt;p&gt;&lt;/p&gt;  **Note**: This API requires two types of x-krn, separated by &#x60;,&#x60; in the request header. &lt;br&gt; krn:{chain-id}:kip7:{account-id}:account-pool:default,krn:{chain-id}:wallet:{account-id}:account-pool:{pool-name}&lt;p&gt;&lt;/p&gt;  - The first KRN: Default KIP-7 &#x60;account-pool&#x60; - The second KRN: Wallet API &#x60;account-pool&#x60;, which has the &#x60;from&#x60; account - Just as in other APIs, omitting the x-krn will give it the default value.&lt;p&gt;&lt;/p&gt;
     * @param {Object} opts Optional parameters
     * @param {KIP7Api~burnTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Kip7TransactionStatusResponse}
     */
    burnToken(xChainId, contractAddressOrAlias, opts, callback) {
        opts = opts || {}
        const postBody = opts.body

        const pathParams = {
            'contract-address-or-alias': contractAddressOrAlias,
        }
        const queryParams = {}
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = ['application/json']
        const accepts = ['application/json']
        const returnType = Kip7TransactionStatusResponse

        return this.apiClient.callApi(
            '/v1/contract/{contract-address-or-alias}/burn',
            'DELETE',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the deployContract operation.
     * @callback KIP7Api~deployContractCallback
     * @param {String} error Error message, if any.
     * @param {Kip7TransactionStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deploy KIP-7 contract
     * Deploys a standard KIP-7 contract based on the data provided. The contract will be deployed via the default contract management account. You cannot change the deployer.   You can retrieve the default contract management accounts via [/v1/deployer/default](#operation/GetDefaultDeployer).   Your &#x60;alias&#x60; must only contain lowercase alphabets, numbers and hyphens and begin with an alphabet. &lt;p&gt;&lt;/p&gt;
     * @param {Object} opts Optional parameters
     * @param {KIP7Api~deployContractCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Kip7TransactionStatusResponse}
     */
    deployContract(xChainId, opts, callback) {
        opts = opts || {}
        const postBody = opts.body

        const pathParams = {}
        const queryParams = {}
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = ['application/json']
        const accepts = ['application/json']
        const returnType = Kip7TransactionStatusResponse

        return this.apiClient.callApi(
            '/v1/contract',
            'POST',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the getContract operation.
     * @callback KIP7Api~getContractCallback
     * @param {String} error Error message, if any.
     * @param {Kip7ContractMetadataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get KIP-7 contract data
     * Returns contract data of the given alias or contract address. &lt;p&gt;&lt;/p&gt;
     * @param {KIP7Api~getContractCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Kip7ContractMetadataResponse}
     */
    getContract(xChainId, contractAddressOrAlias, callback) {
        const postBody = null

        const pathParams = {
            'contract-address-or-alias': contractAddressOrAlias,
        }
        const queryParams = {}
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = []
        const accepts = ['application/json']
        const returnType = Kip7ContractMetadataResponse

        return this.apiClient.callApi(
            '/v1/contract/{contract-address-or-alias}',
            'GET',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the getTokenAllowance operation.
     * @callback KIP7Api~getTokenAllowanceCallback
     * @param {String} error Error message, if any.
     * @param {Kip7TokenBalanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the amount of approved KIP-7 tokens
     * Shows the amount of tokens approved to the &#x60;spender&#x60; by the &#x60;owner&#x60;.&lt;p&gt;&lt;/p&gt;
     * @param {KIP7Api~getTokenAllowanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Kip7TokenBalanceResponse}
     */
    getTokenAllowance(xChainId, contractAddressOrAlias, owner, spender, callback) {
        const postBody = null

        const pathParams = {
            'contract-address-or-alias': contractAddressOrAlias,
            owner: owner,
            spender: spender,
        }
        const queryParams = {}
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = []
        const accepts = ['application/json']
        const returnType = Kip7TokenBalanceResponse

        return this.apiClient.callApi(
            '/v1/contract/{contract-address-or-alias}/account/{owner}/allowance/{spender}',
            'GET',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the getTokenBalance operation.
     * @callback KIP7Api~getTokenBalanceCallback
     * @param {String} error Error message, if any.
     * @param {Kip7TokenBalanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get KIP-7 token balance
     * Shows the&#x60;{owner}&#x60;&#x27;s balance for the given KIP-7 contract.  &lt;p&gt;&lt;/p&gt;
     * @param {KIP7Api~getTokenBalanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Kip7TokenBalanceResponse}
     */
    getTokenBalance(xChainId, contractAddressOrAlias, owner, callback) {
        const postBody = null

        const pathParams = {
            'contract-address-or-alias': contractAddressOrAlias,
            owner: owner,
        }
        const queryParams = {}
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = []
        const accepts = ['application/json']
        const returnType = Kip7TokenBalanceResponse

        return this.apiClient.callApi(
            '/v1/contract/{contract-address-or-alias}/account/{owner}/balance',
            'GET',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the listContractsInDeployerPool operation.
     * @callback KIP7Api~listContractsInDeployerPoolCallback
     * @param {String} error Error message, if any.
     * @param {Kip7ContractListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of KIP-7 contracts
     * Retrieves a list of all KIP-7 contracts deployed by the user. The contracts will be listed in descending order of transactions requested for creation.&lt;p&gt;&lt;/p&gt;  The &#x60;status&#x60; field in the response has one of the following values.&lt;p&gt;&lt;/p&gt;  - &#x60;init&#x60;: The initial status before sending the transaction - &#x60;submitted&#x60;: The status of having submitted the contract deploy transaction - &#x60;deployed&#x60;: The status of having deployed the contract&lt;p&gt;&lt;/p&gt;
     * @param {Object} opts Optional parameters
     * @param {KIP7Api~listContractsInDeployerPoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Kip7ContractListResponse}
     */
    listContractsInDeployerPool(xChainId, opts, callback) {
        opts = opts || {}
        const postBody = null

        const pathParams = {}
        const queryParams = {
            size: opts.size,
            cursor: opts.cursor,
            status: opts.status,
        }
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = []
        const accepts = ['application/json']
        const returnType = Kip7ContractListResponse

        return this.apiClient.callApi(
            '/v1/contract',
            'GET',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the mintToken operation.
     * @callback KIP7Api~mintTokenCallback
     * @param {String} error Error message, if any.
     * @param {Kip7TransactionStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mint KIP-7 tokens
     * Mints a new token for a given user.   The total supply in the contract (&#x60;totalSupply&#x60;) will increase as requested.&lt;p&gt;&lt;/p&gt;
     * @param {Object} opts Optional parameters
     * @param {KIP7Api~mintTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Kip7TransactionStatusResponse}
     */
    mintToken(xChainId, contractAddressOrAlias, opts, callback) {
        opts = opts || {}
        const postBody = opts.body

        const pathParams = {
            'contract-address-or-alias': contractAddressOrAlias,
        }
        const queryParams = {}
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = ['application/json']
        const accepts = ['application/json']
        const returnType = Kip7TransactionStatusResponse

        return this.apiClient.callApi(
            '/v1/contract/{contract-address-or-alias}/mint',
            'POST',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the pauseContract operation.
     * @callback KIP7Api~pauseContractCallback
     * @param {String} error Error message, if any.
     * @param {Kip7TransactionStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pause KIP-7 contract
     * Pauses all token transfers and validations for a given contract.  You can resume token transfers by using [/v1/{contract-address-or-alias}/unpause](#operation/UnpauseContract).&lt;p&gt;&lt;/p&gt;
     * @param {KIP7Api~pauseContractCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Kip7TransactionStatusResponse}
     */
    pauseContract(xChainId, contractAddressOrAlias, callback) {
        const postBody = null

        const pathParams = {
            'contract-address-or-alias': contractAddressOrAlias,
        }
        const queryParams = {}
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = []
        const accepts = ['application/json']
        const returnType = Kip7TransactionStatusResponse

        return this.apiClient.callApi(
            '/v1/contract/{contract-address-or-alias}/pause',
            'POST',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the transferFromToken operation.
     * @callback KIP7Api~transferFromTokenCallback
     * @param {String} error Error message, if any.
     * @param {Kip7TransactionStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delegated KIP-7 token transfer
     * Sends tokens on behalf of the owner.  You need to approve token transfers in advance ([/v1/{contract-address-or-alias}/approve](#operation/ApproveToken)).  &lt;p&gt;&lt;/p&gt;  **Note**: This API requires two types of x-krn, separated by &#x60;,&#x60; in the request header. &lt;br&gt; krn:{chain-id}:kip7:{account-id}:account-pool:default,krn:{chain-id}:wallet:{account-id}:account-pool:{pool-name}&lt;p&gt;&lt;/p&gt;  - The first KRN: Default KIP-7 &#x60;account-pool&#x60; - The second KRN: Wallet API &#x60;account-pool&#x60;, which has the &#x60;spender&#x60; account - Just as in other APIs, omitting the x-krn will give it the default value.&lt;p&gt;&lt;/p&gt;
     * @param {Object} opts Optional parameters
     * @param {KIP7Api~transferFromTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Kip7TransactionStatusResponse}
     */
    transferFromToken(xChainId, contractAddressOrAlias, opts, callback) {
        opts = opts || {}
        const postBody = opts.body

        const pathParams = {
            'contract-address-or-alias': contractAddressOrAlias,
        }
        const queryParams = {}
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = ['application/json']
        const accepts = ['application/json']
        const returnType = Kip7TransactionStatusResponse

        return this.apiClient.callApi(
            '/v1/contract/{contract-address-or-alias}/transfer-from',
            'POST',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the transferToken operation.
     * @callback KIP7Api~transferTokenCallback
     * @param {String} error Error message, if any.
     * @param {Kip7TransactionStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * KIP-7 token transfer
     * Sends tokens of the contract.  If &#x60;from&#x60; is not specified in the request, the sender will be the &#x60;deployer&#x60; of the contract.  &lt;p&gt;&lt;/p&gt;  **Note**: This API requires two types of x-krn, separated by &#x60;,&#x60; in the request header. &lt;br&gt; krn:{chain-id}:kip7:{account-id}:account-pool:default,krn:{chain-id}:wallet:{account-id}:account-pool:{pool-name}&lt;p&gt;&lt;/p&gt;  - The first KRN: Default KIP-7 &#x60;account-pool&#x60; - The second KRN: Wallet API &#x60;account-pool&#x60;, which has the &#x60;from&#x60; account - Just as in other APIs, omitting the x-krn will give it the default value.&lt;p&gt;&lt;/p&gt;
     * @param {Object} opts Optional parameters
     * @param {KIP7Api~transferTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Kip7TransactionStatusResponse}
     */
    transferToken(xChainId, contractAddressOrAlias, opts, callback) {
        opts = opts || {}
        const postBody = opts.body

        const pathParams = {
            'contract-address-or-alias': contractAddressOrAlias,
        }
        const queryParams = {}
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = ['application/json']
        const accepts = ['application/json']
        const returnType = Kip7TransactionStatusResponse

        return this.apiClient.callApi(
            '/v1/contract/{contract-address-or-alias}/transfer',
            'POST',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the unpauseContract operation.
     * @callback KIP7Api~unpauseContractCallback
     * @param {String} error Error message, if any.
     * @param {Kip7TransactionStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resume KIP-7 contract
     * Resumes token transfers and validations for a given contract.&lt;p&gt;&lt;/p&gt;
     * @param {KIP7Api~unpauseContractCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Kip7TransactionStatusResponse}
     */
    unpauseContract(xChainId, contractAddressOrAlias, callback) {
        const postBody = null

        const pathParams = {
            'contract-address-or-alias': contractAddressOrAlias,
        }
        const queryParams = {}
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = []
        const accepts = ['application/json']
        const returnType = Kip7TransactionStatusResponse

        return this.apiClient.callApi(
            '/v1/contract/{contract-address-or-alias}/unpause',
            'POST',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
}
module.exports = KIP7Api
