/*
 * KIP-7 API
 * # Introduction KIP-7 API is a RESTful API for managing KIP-7 contracts and tokens that follow the [KIP-7 Fungible Token Standard](https://kips.klaytn.com/KIPs/kip-7).   You can deploy contracts and send tokens using the default contract managing account (`deployer`) and an `alias`. And by using SDK like caver,  you can manage your contracts and tokens using [Wallet API](https://refs.klaytnapi.com/en/wallet/latest) for contracts created on the Klaytn Network.     # Error Codes  ## 400: Bad Request   | Code | Messages |   | --- | --- |  | 1130050 | incorrect request; spender 1130107 | incorrect bookmark 1134410 | invalid address; to</br>invalid address; owner</br>invalid address; address 1134411 | invalid amount; amount |  ## 404: Not Found   | Code | Messages |  | --- | --- |  | 1134504 | contract not found 1134506 | deployer not found |   ## 409: Conflict   | Code | Messages |   | --- | --- |   | 1134900 | duplicate alias 1134902 | contract already paused 1134903 | contract already unpaused |
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

;(function(root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define([
            '../../ApiClient',
            '../model/ApproveKip7TokenRequest',
            '../model/BurnFromKip7TokenRequest',
            '../model/BurnKip7TokenRequest',
            '../model/DeployKip7ContractRequest',
            '../model/ErrorResponse',
            '../model/Kip7ContractListResponse',
            '../model/Kip7ContractMetadataResponse',
            '../model/Kip7TokenBalanceResponse',
            '../model/Kip7TransactionStatusResponse',
            '../model/MintKip7TokenRequest',
            '../model/TransferKip7TokenFromRequest',
            '../model/TransferKip7TokenRequest',
        ], factory)
    } else if (typeof module === 'object' && module.exports) {
        // CommonJS-like environments that support module.exports, like Node.
        module.exports = factory(
            require('../../ApiClient'),
            require('../model/ApproveKip7TokenRequest'),
            require('../model/BurnFromKip7TokenRequest'),
            require('../model/BurnKip7TokenRequest'),
            require('../model/DeployKip7ContractRequest'),
            require('../model/ErrorResponse'),
            require('../model/Kip7ContractListResponse'),
            require('../model/Kip7ContractMetadataResponse'),
            require('../model/Kip7TokenBalanceResponse'),
            require('../model/Kip7TransactionStatusResponse'),
            require('../model/MintKip7TokenRequest'),
            require('../model/TransferKip7TokenFromRequest'),
            require('../model/TransferKip7TokenRequest')
        )
    } else {
        // Browser globals (root is window)
        if (!root.Kip7Api) {
            root.Kip7Api = {}
        }
        root.Kip7Api.KIP7Api = factory(
            root.Kip7Api.ApiClient,
            root.Kip7Api.ApproveKip7TokenRequest,
            root.Kip7Api.BurnFromKip7TokenRequest,
            root.Kip7Api.BurnKip7TokenRequest,
            root.Kip7Api.DeployKip7ContractRequest,
            root.Kip7Api.ErrorResponse,
            root.Kip7Api.Kip7ContractListResponse,
            root.Kip7Api.Kip7ContractMetadataResponse,
            root.Kip7Api.Kip7TokenBalanceResponse,
            root.Kip7Api.Kip7TransactionStatusResponse,
            root.Kip7Api.MintKip7TokenRequest,
            root.Kip7Api.TransferKip7TokenFromRequest,
            root.Kip7Api.TransferKip7TokenRequest
        )
    }
})(this, function(
    ApiClient,
    ApproveKip7TokenRequest,
    BurnFromKip7TokenRequest,
    BurnKip7TokenRequest,
    DeployKip7ContractRequest,
    ErrorResponse,
    Kip7ContractListResponse,
    Kip7ContractMetadataResponse,
    Kip7TokenBalanceResponse,
    Kip7TransactionStatusResponse,
    MintKip7TokenRequest,
    TransferKip7TokenFromRequest,
    TransferKip7TokenRequest
) {
    /**
     * KIP7 service.
     * @class KIP7Api
     * @version 1.0
     */

    /**
     * Constructs a new KIP7Api.
     * @alias KIP7Api
     * @class
     * @param {ApiClient} [apiClient] Optional API client implementation to use,
     * default to {@link ApiClient#instance} if unspecified.
     */
    const KIP7Api = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance

        /**
         * Callback function to receive the result of the approveToken operation.
         * @callback KIP7Api~approveTokenCallback
         * @param {String} error Error message, if any.
         * @param {Kip7TransactionStatusResponse} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * ApproveToken
         * Authorizes the `spender` to send a certain amount of tokens on behalf of the `owner`.  You can execute a delegated token transfer by calling [/v1/contract/{contract-address-or-alias}/transfer-from](#opera ion/TransferFromToken) API.<p></p>  **Note**: Only a `spender` account address managed by Wallet API can execute delegated token transfers.  <br> **Note**: This API requires two types of x-krn, separated by `,` in the request header. <br> krn:{chain-id}:kip7:{account-id}:account-pool:default,krn:{chain-id}:wallet:{account-id}:account-pool:{pool-name}<p></p>  - The first KRN: Default KIP-7 `account-pool` - The second KRN: `account-pool` Wallet API, which has the `owner` account - Just as in other APIs, not including the x-krn will give it the default value.<p></p>
         * @param {String} xChainId Klaytn Network Chain ID (1001 or 8217)
         * @param {String} contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias
         * @param {Object} opts Optional parameters
         * @param {ApproveKip7TokenRequest} opts.body
         * @param {KIP7Api~approveTokenCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link Kip7TransactionStatusResponse}
         */
        this.approveToken = function(xChainId, contractAddressOrAlias, opts, callback) {
            opts = opts || {}
            const postBody = opts.body

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling approveToken")
            }

            // verify the required parameter 'contractAddressOrAlias' is set
            if (contractAddressOrAlias === undefined || contractAddressOrAlias === null) {
                throw new Error("Missing the required parameter 'contractAddressOrAlias' when calling approveToken")
            }

            const pathParams = {
                'contract-address-or-alias': contractAddressOrAlias,
            }
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = Kip7TransactionStatusResponse

            return this.apiClient.callApi(
                '/v1/contract/{contract-address-or-alias}/approve',
                'POST',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the burnFromToken operation.
         * @callback KIP7Api~burnFromTokenCallback
         * @param {String} error Error message, if any.
         * @param {Kip7TransactionStatusResponse} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * BurnFromToken
         *  `spender` burns `owner`'s tokens on the`owner`'s behalf. The `totalSupply` on the contract will be deducted accordingly.  <p></p>  **Note**: This API requires two types of x-krn, separated by `,` in the request header. <br> krn:{chain-id}:kip7:{account-id}:account-pool:default,krn:{chain-id}:wallet:{account-id}:account-pool:{pool-name}<p></p>  - The first KRN: Default KIP-7 `account-pool` - The second KRN: `account-pool` Wallet API, which has the `spender` account   - Just as in other APIs, not including the x-krn will give it the default value.<p></p>
         * @param {String} xChainId Klaytn Network Chain ID (1001 or 8217)
         * @param {String} contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias
         * @param {Object} opts Optional parameters
         * @param {BurnFromKip7TokenRequest} opts.body
         * @param {KIP7Api~burnFromTokenCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link Kip7TransactionStatusResponse}
         */
        this.burnFromToken = function(xChainId, contractAddressOrAlias, opts, callback) {
            opts = opts || {}
            const postBody = opts.body

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling burnFromToken")
            }

            // verify the required parameter 'contractAddressOrAlias' is set
            if (contractAddressOrAlias === undefined || contractAddressOrAlias === null) {
                throw new Error("Missing the required parameter 'contractAddressOrAlias' when calling burnFromToken")
            }

            const pathParams = {
                'contract-address-or-alias': contractAddressOrAlias,
            }
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = Kip7TransactionStatusResponse

            return this.apiClient.callApi(
                '/v1/contract/{contract-address-or-alias}/burn-from',
                'DELETE',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the burnToken operation.
         * @callback KIP7Api~burnTokenCallback
         * @param {String} error Error message, if any.
         * @param {Kip7TransactionStatusResponse} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * BurnToken
         * Burns tokens. The `totalSupply` on the contract will be deducted accordingly.  <p></p>  **Note**: This API requires two types of x-krn, separated by `,` in the request header. <br> krn:{chain-id}:kip7:{account-id}:account-pool:default,krn:{chain-id}:wallet:{account-id}:account-pool:{pool-name}<p></p>  - The first KRN: Default KIP-7 `account-pool` - The second KRN: Wallet API `account-pool`, which has the `from` account - Just as in other APIs, omitting the x-krn will give it the default value.<p></p>
         * @param {String} xChainId Klaytn Network Chain ID (1001 or 8217)
         * @param {String} contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias
         * @param {Object} opts Optional parameters
         * @param {BurnKip7TokenRequest} opts.body
         * @param {KIP7Api~burnTokenCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link Kip7TransactionStatusResponse}
         */
        this.burnToken = function(xChainId, contractAddressOrAlias, opts, callback) {
            opts = opts || {}
            const postBody = opts.body

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling burnToken")
            }

            // verify the required parameter 'contractAddressOrAlias' is set
            if (contractAddressOrAlias === undefined || contractAddressOrAlias === null) {
                throw new Error("Missing the required parameter 'contractAddressOrAlias' when calling burnToken")
            }

            const pathParams = {
                'contract-address-or-alias': contractAddressOrAlias,
            }
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = Kip7TransactionStatusResponse

            return this.apiClient.callApi(
                '/v1/contract/{contract-address-or-alias}/burn',
                'DELETE',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the deployContract operation.
         * @callback KIP7Api~deployContractCallback
         * @param {String} error Error message, if any.
         * @param {Kip7TransactionStatusResponse} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * DeployContract
         * Deploys a standard KIP-7 contract based on the data provided. The contract will be deployed via the default contract management account. You cannot change the deployer.   You can retrieve the default contract management accounts via [/v1/deployer/default](#operation/GetDefaultDeployer).   Your `alias` must only contain lowercase alphabets, numbers and hyphens and begin with an alphabet. <p></p>
         * @param {String} xChainId Klaytn Network Chain ID (1001 or 8217)
         * @param {Object} opts Optional parameters
         * @param {DeployKip7ContractRequest} opts.body
         * @param {KIP7Api~deployContractCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link Kip7TransactionStatusResponse}
         */
        this.deployContract = function(xChainId, opts, callback) {
            opts = opts || {}
            const postBody = opts.body

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling deployContract")
            }

            const pathParams = {}
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = Kip7TransactionStatusResponse

            return this.apiClient.callApi(
                '/v1/contract',
                'POST',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the getContract operation.
         * @callback KIP7Api~getContractCallback
         * @param {String} error Error message, if any.
         * @param {Kip7ContractMetadataResponse} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * GetContract
         * Returns contract data of the given alias or contract address. <p></p>
         * @param {String} xChainId Klaytn Network Chain ID (1001 or 8217)
         * @param {String} contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias
         * @param {KIP7Api~getContractCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link Kip7ContractMetadataResponse}
         */
        this.getContract = function(xChainId, contractAddressOrAlias, callback) {
            const postBody = null

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling getContract")
            }

            // verify the required parameter 'contractAddressOrAlias' is set
            if (contractAddressOrAlias === undefined || contractAddressOrAlias === null) {
                throw new Error("Missing the required parameter 'contractAddressOrAlias' when calling getContract")
            }

            const pathParams = {
                'contract-address-or-alias': contractAddressOrAlias,
            }
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = Kip7ContractMetadataResponse

            return this.apiClient.callApi(
                '/v1/contract/{contract-address-or-alias}',
                'GET',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the getTokenAllowance operation.
         * @callback KIP7Api~getTokenAllowanceCallback
         * @param {String} error Error message, if any.
         * @param {Kip7TokenBalanceResponse} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * GetTokenAllowance
         * Shows the amount of tokens approved to the `spender` by the `owner`.<p></p>
         * @param {String} xChainId Klaytn Network Chain ID (1001 or 8217)
         * @param {String} contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias
         * @param {String} owner Token owner's Klaytn account address
         * @param {String} spender
         * @param {KIP7Api~getTokenAllowanceCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link Kip7TokenBalanceResponse}
         */
        this.getTokenAllowance = function(xChainId, contractAddressOrAlias, owner, spender, callback) {
            const postBody = null

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling getTokenAllowance")
            }

            // verify the required parameter 'contractAddressOrAlias' is set
            if (contractAddressOrAlias === undefined || contractAddressOrAlias === null) {
                throw new Error("Missing the required parameter 'contractAddressOrAlias' when calling getTokenAllowance")
            }

            // verify the required parameter 'owner' is set
            if (owner === undefined || owner === null) {
                throw new Error("Missing the required parameter 'owner' when calling getTokenAllowance")
            }

            // verify the required parameter 'spender' is set
            if (spender === undefined || spender === null) {
                throw new Error("Missing the required parameter 'spender' when calling getTokenAllowance")
            }

            const pathParams = {
                'contract-address-or-alias': contractAddressOrAlias,
                owner: owner,
                spender: spender,
            }
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = Kip7TokenBalanceResponse

            return this.apiClient.callApi(
                '/v1/contract/{contract-address-or-alias}/account/{owner}/allowance/{spender}',
                'GET',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the getTokenBalance operation.
         * @callback KIP7Api~getTokenBalanceCallback
         * @param {String} error Error message, if any.
         * @param {Kip7TokenBalanceResponse} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * GetTokenBalance
         * Shows the`{owner}`'s balance for the given KIP-7 contract.  <p></p>
         * @param {String} xChainId Klaytn Network Chain ID (1001 or 8217)
         * @param {String} contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias
         * @param {String} owner Klaytn account address to query balance
         * @param {KIP7Api~getTokenBalanceCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link Kip7TokenBalanceResponse}
         */
        this.getTokenBalance = function(xChainId, contractAddressOrAlias, owner, callback) {
            const postBody = null

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling getTokenBalance")
            }

            // verify the required parameter 'contractAddressOrAlias' is set
            if (contractAddressOrAlias === undefined || contractAddressOrAlias === null) {
                throw new Error("Missing the required parameter 'contractAddressOrAlias' when calling getTokenBalance")
            }

            // verify the required parameter 'owner' is set
            if (owner === undefined || owner === null) {
                throw new Error("Missing the required parameter 'owner' when calling getTokenBalance")
            }

            const pathParams = {
                'contract-address-or-alias': contractAddressOrAlias,
                owner: owner,
            }
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = Kip7TokenBalanceResponse

            return this.apiClient.callApi(
                '/v1/contract/{contract-address-or-alias}/account/{owner}/balance',
                'GET',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the listContractsInDeployerPool operation.
         * @callback KIP7Api~listContractsInDeployerPoolCallback
         * @param {String} error Error message, if any.
         * @param {Kip7ContractListResponse} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * ListContractsInDeployerPool
         * Retrieves a list of all KIP-7 contracts deployed by the user. The contracts will be listed in descending order of transactions requested for creation.<p></p>  The `status` field in the response has one of the following values.<p></p>  - `init`: The initial status before sending the transaction - `submitted`: The status of having submitted the contract deploy transaction - `deployed`: The status of having deployed the contract<p></p>
         * @param {String} xChainId Klaytn Network Chain ID (1001 or 8217)
         * @param {Object} opts Optional parameters
         * @param {String} opts.size The maximum number of items to return
         * @param {String} opts.cursor Offset for the first item. You can query data after the given offset using the `cursor` value returned in the response.
         * @param {String} opts.status You can only choose one deploy status [`all`,`init`,`submitted`,`deployed`] for the contract you wish to query. The default value is `all`.
         * @param {KIP7Api~listContractsInDeployerPoolCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link Kip7ContractListResponse}
         */
        this.listContractsInDeployerPool = function(xChainId, opts, callback) {
            opts = opts || {}
            const postBody = null

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling listContractsInDeployerPool")
            }

            const pathParams = {}
            const queryParams = {
                size: opts.size,
                cursor: opts.cursor,
                status: opts.status,
            }
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = Kip7ContractListResponse

            return this.apiClient.callApi(
                '/v1/contract',
                'GET',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the mintToken operation.
         * @callback KIP7Api~mintTokenCallback
         * @param {String} error Error message, if any.
         * @param {Kip7TransactionStatusResponse} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * MintToken
         * Mints a new token for a given user.   The total supply in the contract (`totalSupply`) will increase as requested.<p></p>
         * @param {String} xChainId Klaytn Network Chain ID (1001 or 8217)
         * @param {String} contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or alias
         * @param {Object} opts Optional parameters
         * @param {MintKip7TokenRequest} opts.body
         * @param {KIP7Api~mintTokenCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link Kip7TransactionStatusResponse}
         */
        this.mintToken = function(xChainId, contractAddressOrAlias, opts, callback) {
            opts = opts || {}
            const postBody = opts.body

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling mintToken")
            }

            // verify the required parameter 'contractAddressOrAlias' is set
            if (contractAddressOrAlias === undefined || contractAddressOrAlias === null) {
                throw new Error("Missing the required parameter 'contractAddressOrAlias' when calling mintToken")
            }

            const pathParams = {
                'contract-address-or-alias': contractAddressOrAlias,
            }
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = Kip7TransactionStatusResponse

            return this.apiClient.callApi(
                '/v1/contract/{contract-address-or-alias}/mint',
                'POST',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the pauseContract operation.
         * @callback KIP7Api~pauseContractCallback
         * @param {String} error Error message, if any.
         * @param {Kip7TransactionStatusResponse} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * PauseContract
         * Pauses all token transfers and validations for a given contract.  You can resume token transfers by using [/v1/{contract-address-or-alias}/unpause](#operation/UnpauseContract).<p></p>
         * @param {String} xChainId Klaytn Network Chain ID (1001 or 8217)
         * @param {String} contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias
         * @param {KIP7Api~pauseContractCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link Kip7TransactionStatusResponse}
         */
        this.pauseContract = function(xChainId, contractAddressOrAlias, callback) {
            const postBody = null

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling pauseContract")
            }

            // verify the required parameter 'contractAddressOrAlias' is set
            if (contractAddressOrAlias === undefined || contractAddressOrAlias === null) {
                throw new Error("Missing the required parameter 'contractAddressOrAlias' when calling pauseContract")
            }

            const pathParams = {
                'contract-address-or-alias': contractAddressOrAlias,
            }
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = Kip7TransactionStatusResponse

            return this.apiClient.callApi(
                '/v1/contract/{contract-address-or-alias}/pause',
                'POST',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the transferFromToken operation.
         * @callback KIP7Api~transferFromTokenCallback
         * @param {String} error Error message, if any.
         * @param {Kip7TransactionStatusResponse} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * TransferFromToken
         * Sends tokens on behalf of the owner.  You need to approve token transfers in advance ([/v1/{contract-address-or-alias}/approve](#operation/ApproveToken)).  <p></p>  **Note**: This API requires two types of x-krn, separated by `,` in the request header. <br> krn:{chain-id}:kip7:{account-id}:account-pool:default,krn:{chain-id}:wallet:{account-id}:account-pool:{pool-name}<p></p>  - The first KRN: Default KIP-7 `account-pool` - The second KRN: Wallet API `account-pool`, which has the `spender` account - Just as in other APIs, omitting the x-krn will give it the default value.<p></p>
         * @param {String} xChainId Klaytn Network Chain ID (1001 or 8217)
         * @param {String} contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias
         * @param {Object} opts Optional parameters
         * @param {TransferKip7TokenFromRequest} opts.body
         * @param {KIP7Api~transferFromTokenCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link Kip7TransactionStatusResponse}
         */
        this.transferFromToken = function(xChainId, contractAddressOrAlias, opts, callback) {
            opts = opts || {}
            const postBody = opts.body

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling transferFromToken")
            }

            // verify the required parameter 'contractAddressOrAlias' is set
            if (contractAddressOrAlias === undefined || contractAddressOrAlias === null) {
                throw new Error("Missing the required parameter 'contractAddressOrAlias' when calling transferFromToken")
            }

            const pathParams = {
                'contract-address-or-alias': contractAddressOrAlias,
            }
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = Kip7TransactionStatusResponse

            return this.apiClient.callApi(
                '/v1/contract/{contract-address-or-alias}/transfer-from',
                'POST',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the transferToken operation.
         * @callback KIP7Api~transferTokenCallback
         * @param {String} error Error message, if any.
         * @param {Kip7TransactionStatusResponse} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * TransferToken
         * Sends tokens of the contract.  If `from` is not specified in the request, the sender will be the `deployer` of the contract.  <p></p>  **Note**: This API requires two types of x-krn, separated by `,` in the request header. <br> krn:{chain-id}:kip7:{account-id}:account-pool:default,krn:{chain-id}:wallet:{account-id}:account-pool:{pool-name}<p></p>  - The first KRN: Default KIP-7 `account-pool` - The second KRN: Wallet API `account-pool`, which has the `from` account - Just as in other APIs, omitting the x-krn will give it the default value.<p></p>
         * @param {String} xChainId Klaytn Network Chain ID (1001 or 8217)
         * @param {String} contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias
         * @param {Object} opts Optional parameters
         * @param {TransferKip7TokenRequest} opts.body
         * @param {KIP7Api~transferTokenCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link Kip7TransactionStatusResponse}
         */
        this.transferToken = function(xChainId, contractAddressOrAlias, opts, callback) {
            opts = opts || {}
            const postBody = opts.body

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling transferToken")
            }

            // verify the required parameter 'contractAddressOrAlias' is set
            if (contractAddressOrAlias === undefined || contractAddressOrAlias === null) {
                throw new Error("Missing the required parameter 'contractAddressOrAlias' when calling transferToken")
            }

            const pathParams = {
                'contract-address-or-alias': contractAddressOrAlias,
            }
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = Kip7TransactionStatusResponse

            return this.apiClient.callApi(
                '/v1/contract/{contract-address-or-alias}/transfer',
                'POST',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the unpauseContract operation.
         * @callback KIP7Api~unpauseContractCallback
         * @param {String} error Error message, if any.
         * @param {Kip7TransactionStatusResponse} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * UnpauseContract
         * Resumes token transfers and validations for a given contract.<p></p>
         * @param {String} xChainId Klaytn Network Chain ID (1001 or 8217)
         * @param {String} contractAddressOrAlias Contract address (in hexadecimal with the 0x prefix) or an alias
         * @param {KIP7Api~unpauseContractCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link Kip7TransactionStatusResponse}
         */
        this.unpauseContract = function(xChainId, contractAddressOrAlias, callback) {
            const postBody = null

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling unpauseContract")
            }

            // verify the required parameter 'contractAddressOrAlias' is set
            if (contractAddressOrAlias === undefined || contractAddressOrAlias === null) {
                throw new Error("Missing the required parameter 'contractAddressOrAlias' when calling unpauseContract")
            }

            const pathParams = {
                'contract-address-or-alias': contractAddressOrAlias,
            }
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = Kip7TransactionStatusResponse

            return this.apiClient.callApi(
                '/v1/contract/{contract-address-or-alias}/unpause',
                'POST',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }
    }

    return KIP7Api
})
