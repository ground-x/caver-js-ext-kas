/**
 * KIP-37 API
 * ## Introduction The KIP-37 API helps Blockchain app (BApp) developers to easily deploy smart contracts and send tokens of the [KIP-37 Multi Token Standard](https://kips.klaytn.com/KIPs/kip-37).  You can use the default contract managing account (`deployer`) and `alias`.    You can also manage the contracts and tokens created on the klaytn network using the caver SDK, using contract address and the [Wallet API](https://refs.klaytnapi.com/ko/wallet/latest) account.    ## Fee Payer Options  KAS KIP-37 supports four scenarios for paying transactin fees:      **1. Using only KAS Global FeePayer Account**   Sends all transactions using the KAS global FeePayer Account.       ``` {     \"options\": {       \"enableGlobalFeePayer\": true     }     } ```    <br />    **2. Using User FeePayer account**   Sends all transactions using the KAS User FeePayer Account.      ``` {   \"options\": {     \"enableGlobalFeePayer\": false,     \"userFeePayer\": {       \"krn\": \"krn:1001:wallet:20bab367-141b-439a-8b4c-ae8788b86316:feepayer-pool:default\",       \"address\": \"0xd6905b98E4Ba43a24E842d2b66c1410173791cab\"     }   } } ```    <br />  **3. Using both KAS Global FeePayer Account + User FeePayer Account**   Uses User FeePayer Account as default. When the balance runs out, KAS Global FeePayer Account will be used.     ``` {   \"options\": {     \"enableGlobalFeePayer\": true,     \"userFeePayer\": {       \"krn\": \"krn:1001:wallet:20bab367-141b-439a-8b4c-ae8788b86316:feepayer-pool:default\",       \"address\": \"0xd6905b98E4Ba43a24E842d2b66c1410173791cab\"     }   } } ```    <br />  **4. Not using FeePayer Account**   Sends a transaction via normal means where the sender pays the transaction fee.       ``` {   \"options\": {     \"enableGlobalFeePayer\": false   } } ```
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

const ApiClient = require('../../ApiClient')
const ApproveAllKip37ContractRequest = require('../model/ApproveAllKip37ContractRequest')
const DeployKip37ContractRequest = require('../model/DeployKip37ContractRequest')
const ErrorResponse = require('../model/ErrorResponse')
const ImportKip37ContractRequest = require('../model/ImportKip37ContractRequest')
const Kip37Contract = require('../model/Kip37Contract')
const Kip37ContractListResponse = require('../model/Kip37ContractListResponse')
const Kip37DeployResponse = require('../model/Kip37DeployResponse')
const Kip37TransactionStatusResponse = require('../model/Kip37TransactionStatusResponse')
const OperateKip37ContractRequest = require('../model/OperateKip37ContractRequest')
const UpdateKip37ContractRequest = require('../model/UpdateKip37ContractRequest')

/**
 * Kip37Contract service.
 * @class Kip37ContractApi
 * @version 1.0
 */
class Kip37ContractApi {
    /**
     * Constructs a new Kip37ContractApi.
     * @alias Kip37ContractApi
     * @class
     * @param {ApiClient} [apiClient] Optional API client implementation to use,
     * default to {@link ApiClient#instance} if unspecified.
     */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance
    }

    /**
     * Callback function to receive the result of the approveAll operation.
     * @callback Kip37ContractApi~approveAllCallback
     * @param {String} error Error message, if any.
     * @param {Kip37TransactionStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Grant/Remove Authorization for Token Transfers
     * Grants/cancels authorization to a third party (&#x60;to&#x60;) to transfer all tokens for a specified contract.    ##### From The account that sends the transaction.  If the &#x60;from&#x60; account belongs to a default &#x60;account-pool&#x60; for either KIP-37 or Wallet, you can omit the KRN.&lt;br /&gt; Otherwise you have to provide the KRN data (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;) in the header.
     * @param {Object} opts Optional parameters
     * @param {Kip37ContractApi~approveAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Kip37TransactionStatusResponse}
     */
    approveAll(contractAddressOrAlias, xChainId, opts, callback) {
        opts = opts || {}
        const postBody = opts.body

        const pathParams = {
            'contract-address-or-alias': contractAddressOrAlias,
        }
        const queryParams = {}
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = ['application/json']
        const accepts = ['application/json']
        const returnType = Kip37TransactionStatusResponse

        return this.apiClient.callApi(
            '/v1/contract/{contract-address-or-alias}/approveall',
            'POST',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the deployContract operation.
     * @callback Kip37ContractApi~deployContractCallback
     * @param {String} error Error message, if any.
     * @param {Kip37DeployResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deploy KIP-37 Contract
     * Deploys a KIP-37 contract. &lt;br/&gt;   KIP-37 supports the use of &#x60;alias&#x60;, which you can use in place of the account address. The &#x60;alias&#x60; must only contain lowercase letters, numbers and hyphens and begin with a lowercase letter.  ##### Options   Options for paying the transaction fee. For more details, please refer to [Fee Payer Options](#section/Fee-Payer-Options).
     * @param {Object} opts Optional parameters
     * @param {Kip37ContractApi~deployContractCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Kip37DeployResponse}
     */
    deployContract(xChainId, opts, callback) {
        opts = opts || {}
        const postBody = opts.body

        const pathParams = {}
        const queryParams = {}
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = ['application/json']
        const accepts = ['application/json']
        const returnType = Kip37DeployResponse

        return this.apiClient.callApi(
            '/v1/contract',
            'POST',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the getContract operation.
     * @callback Kip37ContractApi~getContractCallback
     * @param {String} error Error message, if any.
     * @param {Kip37Contract} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get KIP-37 Contract Information
     * Queries a specified contract using the alias or the contract address.
     * @param {Kip37ContractApi~getContractCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Kip37Contract}
     */
    getContract(contractAddressOrAlias, xChainId, callback) {
        const postBody = null

        const pathParams = {
            'contract-address-or-alias': contractAddressOrAlias,
        }
        const queryParams = {}
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = []
        const accepts = ['application/json']
        const returnType = Kip37Contract

        return this.apiClient.callApi(
            '/v1/contract/{contract-address-or-alias}',
            'GET',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the importContract operation.
     * @callback Kip37ContractApi~importContractCallback
     * @param {String} error Error message, if any.
     * @param {Kip37Contract} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import KIP-37 Contract
     * Import a contract that has already been deployed.&lt;br/&gt;   The &#x60;alias&#x60; must only contain lowercase letters, numbers and hyphens and begin with a lowercase letter.  ##### Options   Options for paying the transaction fee. For more details, please refer to [Fee Payer Options](#section/Fee-Payer-Options).
     * @param {Object} opts Optional parameters
     * @param {Kip37ContractApi~importContractCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Kip37Contract}
     */
    importContract(xChainId, opts, callback) {
        opts = opts || {}
        const postBody = opts.body

        const pathParams = {}
        const queryParams = {}
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = ['application/json']
        const accepts = ['application/json']
        const returnType = Kip37Contract

        return this.apiClient.callApi(
            '/v1/contract/import',
            'POST',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the listContractsInDeployerPool operation.
     * @callback Kip37ContractApi~listContractsInDeployerPoolCallback
     * @param {String} error Error message, if any.
     * @param {Kip37ContractListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get KIP-37 Contract
     * Get a list of all KIP-37 contracts by account. The response items will be listed in the order of contract creation request time. &lt;br/&gt;&lt;br/&gt; The &#x60;status&#x60; field in the response can contain the following: - &#x60;init&#x60;: Initial state before transaction is sent - &#x60;submitted&#x60;: Contract deployment transaction has been sent - &#x60;deployed&#x60;: Contract has been deployed - &#x60;imported&#x60;: Contract list has been imported - &#x60;failed&#x60: Contract deployment transaction has failed
     * @param {Object} opts Optional parameters
     * @param {Kip37ContractApi~listContractsInDeployerPoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Kip37ContractListResponse}
     */
    listContractsInDeployerPool(xChainId, opts, callback) {
        opts = opts || {}
        const postBody = null

        const pathParams = {}
        const queryParams = {
            size: opts.size,
            cursor: opts.cursor,
            status: opts.status,
        }
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = []
        const accepts = ['application/json']
        const returnType = Kip37ContractListResponse

        return this.apiClient.callApi(
            '/v1/contract',
            'GET',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the pauseContract operation.
     * @callback Kip37ContractApi~pauseContractCallback
     * @param {String} error Error message, if any.
     * @param {Kip37TransactionStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pause KIP-37 Contract
     * Pauses all operations for a specified contract, such as minting, transfering tokens.&lt;br /&gt; You can resume using [/v1/{contract-address-or-alias/unpause](#operation/UnpauseContract).    ##### Sender The Account that sends the transaction.  If the &#x60;sender&#x60; account belongs to a default &#x60;account-pool&#x60; for either KIP-37 or Wallet, you can omit the KRN.&lt;br /&gt;&lt;br /&gt; Otherwise you have to provide the KRN data (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;) in the header.
     * @param {Object} opts Optional parameters
     * @param {Kip37ContractApi~pauseContractCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Kip37TransactionStatusResponse}
     */
    pauseContract(contractAddressOrAlias, xChainId, opts, callback) {
        opts = opts || {}
        const postBody = opts.body

        const pathParams = {
            'contract-address-or-alias': contractAddressOrAlias,
        }
        const queryParams = {}
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = ['application/json']
        const accepts = ['application/json']
        const returnType = Kip37TransactionStatusResponse

        return this.apiClient.callApi(
            '/v1/contract/{contract-address-or-alias}/pause',
            'POST',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the putContract operation.
     * @callback Kip37ContractApi~putContractCallback
     * @param {String} error Error message, if any.
     * @param {Kip37Contract} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit KIP-37 Contract Information
     * Edits the information of a contract. &lt;br/&gt;  ##### Options   Options for paying the transaction fee. For more details, please refer to [Fee Payer Options](#section/Fee-Payer-Options).
     * @param {Object} opts Optional parameters
     * @param {Kip37ContractApi~putContractCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Kip37Contract}
     */
    putContract(contractAddressOrAlias, xChainId, opts, callback) {
        opts = opts || {}
        const postBody = opts.body

        const pathParams = {
            'contract-address-or-alias': contractAddressOrAlias,
        }
        const queryParams = {}
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = ['application/json']
        const accepts = ['application/json']
        const returnType = Kip37Contract

        return this.apiClient.callApi(
            '/v1/contract/{contract-address-or-alias}',
            'PUT',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the unpauseContract operation.
     * @callback Kip37ContractApi~unpauseContractCallback
     * @param {String} error Error message, if any.
     * @param {Kip37TransactionStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resume KIP-37 Contract
     * Resumes the operations for a paused contract.  ##### Sender The account for sending the transaction.  If the &#x60;sender&#x60; account belongs to a default &#x60;account-pool&#x60; for either KIP-37 or Wallet, you can omit the KRN.&lt;br /&gt; Otherwise you have to provide the KRN data (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;) in the header.
     * @param {Object} opts Optional parameters
     * @param {Kip37ContractApi~unpauseContractCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Kip37TransactionStatusResponse}
     */
    unpauseContract(contractAddressOrAlias, xChainId, opts, callback) {
        opts = opts || {}
        const postBody = opts.body

        const pathParams = {
            'contract-address-or-alias': contractAddressOrAlias,
        }
        const queryParams = {}
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = ['application/json']
        const accepts = ['application/json']
        const returnType = Kip37TransactionStatusResponse

        return this.apiClient.callApi(
            '/v1/contract/{contract-address-or-alias}/unpause',
            'POST',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
}
module.exports = Kip37ContractApi
