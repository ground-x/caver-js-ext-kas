/**
 * KIP-37 API
 * ## Introduction The KIP-37 API helps Blockchain app (BApp) developers to easily deploy smart contracts and send tokens of the [KIP-37 Multi Token Standard](https://kips.klaytn.com/KIPs/kip-37).  You can use the default contract managing account (`deployer`) and `alias`.    You can also manage the contracts and tokens created on the klaytn network using the caver SDK, using contract address and the [Wallet API](https://refs.klaytnapi.com/ko/wallet/latest) account.    ## Fee Payer Options  KAS KIP-37 supports four scenarios for paying transactin fees:      **1. Using only KAS Global FeePayer Account**   Sends all transactions using the KAS global FeePayer Account.       ``` {     \"options\": {       \"enableGlobalFeePayer\": true     }     } ```    <br />    **2. Using User FeePayer account**   Sends all transactions using the KAS User FeePayer Account.      ``` {   \"options\": {     \"enableGlobalFeePayer\": false,     \"userFeePayer\": {       \"krn\": \"krn:1001:wallet:20bab367-141b-439a-8b4c-ae8788b86316:feepayer-pool:default\",       \"address\": \"0xd6905b98E4Ba43a24E842d2b66c1410173791cab\"     }   } } ```    <br />  **3. Using both KAS Global FeePayer Account + User FeePayer Account**   Uses User FeePayer Account as default. When the balance runs out, KAS Global FeePayer Account will be used.     ``` {   \"options\": {     \"enableGlobalFeePayer\": true,     \"userFeePayer\": {       \"krn\": \"krn:1001:wallet:20bab367-141b-439a-8b4c-ae8788b86316:feepayer-pool:default\",       \"address\": \"0xd6905b98E4Ba43a24E842d2b66c1410173791cab\"     }   } } ```    <br />  **4. Not using FeePayer Account**   Sends a transaction via normal means where the sender pays the transaction fee.       ``` {   \"options\": {     \"enableGlobalFeePayer\": false   } } ```
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

const ApiClient = require('../../../ApiClient')
const BurnKip37TokenRequest = require('../../model/BurnKip37TokenRequest')
const CreateKip37TokenRequest = require('../../model/CreateKip37TokenRequest')
const ErrorResponse = require('../../model/ErrorResponse')
const Kip37TokenInfoListResponse = require('../../model/Kip37TokenInfoListResponse')
const Kip37TransactionStatusResponse = require('../../model/Kip37TransactionStatusResponse')
const MintKip37TokenRequest = require('../../model/MintKip37TokenRequest')
const OperateKip37ContractRequest = require('../../model/OperateKip37ContractRequest')
const TransferKip37TokenRequest = require('../../model/TransferKip37TokenRequest')

/**
 * Kip37Token service.
 * @class Kip37TokenApi
 * @version 1.0
 */
class Kip37TokenApi {
    /**
     * Constructs a new Kip37TokenApi.
     * @alias Kip37TokenApi
     * @class
     * @param {ApiClient} [apiClient] Optional API client implementation to use,
     * default to {@link ApiClient#instance} if unspecified.
     */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance
    }

    /**
     * Callback function to receive the result of the burnToken operation.
     * @callback Kip37TokenApi~burnTokenCallback
     * @param {String} error Error message, if any.
     * @param {Kip37TransactionStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Burn KIP-37 Token
     * Burns KIP-37 tokens.  ##### From The account that sends the transaction.  If the &#x60;from&#x60; account belongs to a default &#x60;account-pool&#x60; for either KIP-37 or Wallet, you can omit the KRN.&lt;br /&gt; Otherwise you have to provide the KRN data (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;) in the header.  ##### Batch Items Call the contract function according to the Batch Items (&#x60;ids&#x60;, &#x60;amounts&#x60;) included in the request.  - If there is one element, call the &#x60;burn&#x60; function. - If there are multiple elements, call the &#x60;burnBatch&#x60; function.
     * @param {Object} opts Optional parameters
     * @param {Kip37TokenApi~burnTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Kip37TransactionStatusResponse}
     */
    burnToken(contractAddressOrAlias, xChainId, opts, callback) {
        opts = opts || {}
        const postBody = opts.body

        const pathParams = {
            'contract-address-or-alias': contractAddressOrAlias,
        }
        const queryParams = {}
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = ['application/json']
        const accepts = ['application/json']
        const returnType = Kip37TransactionStatusResponse

        return this.apiClient.callApi(
            '/v1/contract/{contract-address-or-alias}/token',
            'DELETE',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the createToken operation.
     * @callback Kip37TokenApi~createTokenCallback
     * @param {String} error Error message, if any.
     * @param {Kip37TransactionStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mint a KIP-37 Token
     * Creates a new token from a specified KIP-37 contract.  ##### Sender The account for sending the transaction.  If the &#x60;sender&#x60; account belongs to a default &#x60;account-pool&#x60; for either KIP-37 or Wallet, you can omit the KRN.&lt;br /&gt; Otherwise you have to provide the KRN data (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;) in the header.
     * @param {Object} opts Optional parameters
     * @param {Kip37TokenApi~createTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Kip37TransactionStatusResponse}
     */
    createToken(contractAddressOrAlias, xChainId, opts, callback) {
        opts = opts || {}
        const postBody = opts.body

        const pathParams = {
            'contract-address-or-alias': contractAddressOrAlias,
        }
        const queryParams = {}
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = ['application/json']
        const accepts = ['application/json']
        const returnType = Kip37TransactionStatusResponse

        return this.apiClient.callApi(
            '/v1/contract/{contract-address-or-alias}/token',
            'POST',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the getTokens operation.
     * @callback Kip37TokenApi~getTokensCallback
     * @param {String} error Error message, if any.
     * @param {Kip37TokenInfoListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get KIP-37 Token List
     * Returns a list of KIP-37 tokens.   ##### Sort Order - The response items are listed in lexicographical order of the token ID.
     * @param {Object} opts Optional parameters
     * @param {Kip37TokenApi~getTokensCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Kip37TokenInfoListResponse}
     */
    getTokens(contractAddressOrAlias, xChainId, opts, callback) {
        opts = opts || {}
        const postBody = null

        const pathParams = {
            'contract-address-or-alias': contractAddressOrAlias,
        }
        const queryParams = {
            size: opts.size,
            cursor: opts.cursor,
        }
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = []
        const accepts = ['application/json']
        const returnType = Kip37TokenInfoListResponse

        return this.apiClient.callApi(
            '/v1/contract/{contract-address-or-alias}/token',
            'GET',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the mintToken operation.
     * @callback Kip37TokenApi~mintTokenCallback
     * @param {String} error Error message, if any.
     * @param {Kip37TransactionStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mint Additional KIP-37 Tokens
     * Mints multiple tokens for a given KIP-37 contract.   Minting is possible after having created a token with [Create KIP-37 Token](#operation/CreateToken).    ##### Sender The account for sending the transaction.  If the &#x60;sender&#x60; account belongs to a default &#x60;account-pool&#x60; for either KIP-37 or Wallet, you can omit the KRN.&lt;br /&gt; Otherwise you have to provide the KRN data (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;) in the header.  ##### Batch Items Call the contract function according to the Batch Items (&#x60;ids&#x60;, &#x60;amounts&#x60;) included in the request.  - If there is one element, call the &#x60;mint&#x60; function. - If there are multiple elements, call the &#x60;mintBatch&#x60; function.
     * @param {Object} opts Optional parameters
     * @param {Kip37TokenApi~mintTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Kip37TransactionStatusResponse}
     */
    mintToken(contractAddressOrAlias, xChainId, opts, callback) {
        opts = opts || {}
        const postBody = opts.body

        const pathParams = {
            'contract-address-or-alias': contractAddressOrAlias,
        }
        const queryParams = {}
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = ['application/json']
        const accepts = ['application/json']
        const returnType = Kip37TransactionStatusResponse

        return this.apiClient.callApi(
            '/v1/contract/{contract-address-or-alias}/token/mint',
            'POST',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the pauseToken operation.
     * @callback Kip37TokenApi~pauseTokenCallback
     * @param {String} error Error message, if any.
     * @param {Kip37TransactionStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pause KIP-37 Token Operations
     * Pauses the operations of a specified token, such as minting and creating tokens.  You can resume the opertations by using [/v1/{contract-address-or-alias/token/unpause/{token-id}](#operation/UnpauseToken).  ##### Sender The account for sending the transaction.  If the &#x60;sender&#x60; account belongs to a default &#x60;account-pool&#x60; for either KIP-37 or Wallet, you can omit the KRN.&lt;br /&gt; Otherwise you have to provide the KRN data (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;) in the header.
     * @param {Object} opts Optional parameters
     * @param {Kip37TokenApi~pauseTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Kip37TransactionStatusResponse}
     */
    pauseToken(contractAddressOrAlias, tokenId, xChainId, opts, callback) {
        opts = opts || {}
        const postBody = opts.body

        const pathParams = {
            'contract-address-or-alias': contractAddressOrAlias,
            'token-id': tokenId,
        }
        const queryParams = {}
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = ['application/json']
        const accepts = ['application/json']
        const returnType = Kip37TransactionStatusResponse

        return this.apiClient.callApi(
            '/v1/contract/{contract-address-or-alias}/token/pause/{token-id}',
            'POST',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the transferToken operation.
     * @callback Kip37TokenApi~transferTokenCallback
     * @param {String} error Error message, if any.
     * @param {Kip37TransactionStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send KIP-37 Token
     * Sends multiple tokens for a given KIP-37 contract.  ##### Sender The account for sending the transaction. If the &#x60;sender&#x60; and&#x60;owner&#x60; are different,&#x60;sender&#x60; must be authorized to send the token.  If the &#x60;sender&#x60; account belongs to a default &#x60;account-pool&#x60; for either KIP-37 or Wallet, you can omit the KRN.&lt;br /&gt; Otherwise you have to provide the KRN data (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;) in the header.  ##### Batch Items Call the contract function according to the Batch Items (&#x60;ids&#x60;, &#x60;amounts&#x60;) included in the request.  - If there is one element, call the &#x60;safeTransferFrom&#x60; function. - If there are multiple elements, call the &#x60;safeBatchTransferFrom&#x60; function.
     * @param {Object} opts Optional parameters
     * @param {Kip37TokenApi~transferTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Kip37TransactionStatusResponse}
     */
    transferToken(contractAddressOrAlias, xChainId, opts, callback) {
        opts = opts || {}
        const postBody = opts.body

        const pathParams = {
            'contract-address-or-alias': contractAddressOrAlias,
        }
        const queryParams = {}
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = ['application/json']
        const accepts = ['application/json']
        const returnType = Kip37TransactionStatusResponse

        return this.apiClient.callApi(
            '/v1/contract/{contract-address-or-alias}/token/transfer',
            'POST',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
    /**
     * Callback function to receive the result of the unpauseToken operation.
     * @callback Kip37TokenApi~unpauseTokenCallback
     * @param {String} error Error message, if any.
     * @param {Kip37TransactionStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resume KIP-37 Token Operations
     * Resumes paused token operations for a given contract.  ##### Sender The account for sending the transaction. If the &#x60;sender&#x60; and &#x60;owner&#x60; are different, &#x60;sender&#x60; must be authorized to transfer the token.    If the &#x60;sender&#x60; account belongs to a default &#x60;account-pool&#x60; for either KIP-37 or Wallet, you can omit the KRN.&lt;br /&gt; Otherwise you have to provide the KRN data (&#x60;x-krn: krn:{chain-id}:wallet:{account-id}:account-pool:{pool name}&#x60;) in the header.
     * @param {Object} opts Optional parameters
     * @param {Kip37TokenApi~unpauseTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Kip37TransactionStatusResponse}
     */
    unpauseToken(contractAddressOrAlias, tokenId, xChainId, opts, callback) {
        opts = opts || {}
        const postBody = opts.body

        const pathParams = {
            'contract-address-or-alias': contractAddressOrAlias,
            'token-id': tokenId,
        }
        const queryParams = {}
        const headerParams = {
            'x-chain-id': xChainId,
        }
        const formParams = {}

        const authNames = ['basic']
        const contentTypes = ['application/json']
        const accepts = ['application/json']
        const returnType = Kip37TransactionStatusResponse

        return this.apiClient.callApi(
            '/v1/contract/{contract-address-or-alias}/token/unpause/{token-id}',
            'POST',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
        )
    }
}
module.exports = Kip37TokenApi
